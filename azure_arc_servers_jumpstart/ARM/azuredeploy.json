{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.28.1.47646",
      "templateHash": "8785279942953846053"
    }
  },
  "parameters": {
    "spnTenantId": {
      "type": "string",
      "metadata": {
        "description": "Azure AD tenant id for your service principal"
      }
    },
    "windowsAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for Windows account"
      }
    },
    "windowsAdminPassword": {
      "type": "securestring",
      "minLength": 12,
      "maxLength": 123,
      "metadata": {
        "description": "Password for Windows account. Password must have 3 of the following: 1 lower case character, 1 upper case character, 1 number, and 1 special character. The value must be between 12 and 123 characters long"
      }
    },
    "vmAutologon": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable automatic logon into ArcBox Virtual Machine"
      }
    },
    "rdpPort": {
      "type": "string",
      "defaultValue": "3389",
      "metadata": {
        "description": "Override default RDP port using this parameter. Default is 3389. No changes will be made to the client VM."
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "Name for your log analytics workspace"
      }
    },
    "flavor": {
      "type": "string",
      "defaultValue": "ITPro",
      "allowedValues": [
        "ITPro"
      ],
      "metadata": {
        "description": "The flavor of ArcBox you want to deploy."
      }
    },
    "githubAccount": {
      "type": "string",
      "defaultValue": "azure",
      "metadata": {
        "description": "Target GitHub account"
      }
    },
    "githubBranch": {
      "type": "string",
      "defaultValue": "psconfeu",
      "metadata": {
        "description": "Target GitHub branch"
      }
    },
    "deployBastion": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Choice to deploy Bastion to connect to the client VM"
      }
    },
    "githubUser": {
      "type": "string",
      "defaultValue": "microsoft",
      "metadata": {
        "description": "User github account where they have forked https://github.com/microsoft/azure-arc-jumpstart-apps"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure location to deploy all resources"
      }
    },
    "emailAddress": {
      "type": "string",
      "metadata": {
        "description": "Your email address to configure alerts."
      }
    }
  },
  "variables": {
    "templateBaseUrl": "[format('https://raw.githubusercontent.com/{0}/arc_jumpstart_levelup/{1}/azure_arc_servers_jumpstart/', parameters('githubAccount'), parameters('githubBranch'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "clientVmDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "windowsAdminUsername": {
            "value": "[parameters('windowsAdminUsername')]"
          },
          "windowsAdminPassword": {
            "value": "[parameters('windowsAdminPassword')]"
          },
          "azdataPassword": {
            "value": "[parameters('windowsAdminPassword')]"
          },
          "spnTenantId": {
            "value": "[parameters('spnTenantId')]"
          },
          "workspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "stagingStorageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'stagingStorageAccountDeployment'), '2022-09-01').outputs.storageAccountName.value]"
          },
          "templateBaseUrl": {
            "value": "[variables('templateBaseUrl')]"
          },
          "flavor": {
            "value": "[parameters('flavor')]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'mgmtArtifactsAndPolicyDeployment'), '2022-09-01').outputs.subnetId.value]"
          },
          "deployBastion": {
            "value": "[parameters('deployBastion')]"
          },
          "githubUser": {
            "value": "[parameters('githubUser')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vmAutologon": {
            "value": "[parameters('vmAutologon')]"
          },
          "rdpPort": {
            "value": "[parameters('rdpPort')]"
          },
          "changeTrackingDCR": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataCollectionRules'), '2022-09-01').outputs.changeTrackingDCR.value]"
          },
          "vmInsightsDCR": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataCollectionRules'), '2022-09-01').outputs.vmInsightsDCR.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "3235582393597339625"
            }
          },
          "parameters": {
            "vmName": {
              "type": "string",
              "defaultValue": "ArcBox-Client",
              "metadata": {
                "description": "The name of your Virtual Machine"
              }
            },
            "windowsAdminUsername": {
              "type": "string",
              "defaultValue": "arcdemo",
              "metadata": {
                "description": "Username for the Virtual Machine"
              }
            },
            "vmAutologon": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable automatic logon into ArcBox Virtual Machine"
              }
            },
            "rdpPort": {
              "type": "string",
              "defaultValue": "3389",
              "metadata": {
                "description": "Override default RDP port using this parameter. Default is 3389. No changes will be made to the client VM."
              }
            },
            "windowsAdminPassword": {
              "type": "securestring",
              "minLength": 12,
              "maxLength": 123,
              "metadata": {
                "description": "Password for Windows account. Password must have 3 of the following: 1 lower case character, 1 upper case character, 1 number, and 1 special character. The value must be between 12 and 123 characters long"
              }
            },
            "windowsOSVersion": {
              "type": "string",
              "defaultValue": "2022-datacenter-g2",
              "metadata": {
                "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources"
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "Resource Id of the subnet in the virtual network"
              }
            },
            "resourceTags": {
              "type": "object",
              "defaultValue": {
                "Project": "jumpstart_arcbox"
              }
            },
            "spnAuthority": {
              "type": "string",
              "defaultValue": "[environment().authentication.loginEndpoint]"
            },
            "spnTenantId": {
              "type": "string",
              "metadata": {
                "description": "Tenant id of the service principal"
              }
            },
            "azdataUsername": {
              "type": "string",
              "defaultValue": "arcdemo"
            },
            "azdataPassword": {
              "type": "securestring"
            },
            "acceptEula": {
              "type": "string",
              "defaultValue": "yes"
            },
            "arcDcName": {
              "type": "string",
              "defaultValue": "arcdatactrl"
            },
            "mssqlmiName": {
              "type": "string",
              "defaultValue": "arcsqlmidemo"
            },
            "postgresName": {
              "type": "string",
              "defaultValue": "arcpg",
              "metadata": {
                "description": "Name of PostgreSQL server group"
              }
            },
            "postgresWorkerNodeCount": {
              "type": "int",
              "defaultValue": 3,
              "metadata": {
                "description": "Number of PostgreSQL worker nodes"
              }
            },
            "postgresDatasize": {
              "type": "int",
              "defaultValue": 1024,
              "metadata": {
                "description": "Size of data volumes in MB"
              }
            },
            "postgresServiceType": {
              "type": "string",
              "defaultValue": "LoadBalancer",
              "metadata": {
                "description": "Choose how PostgreSQL service is accessed through Kubernetes networking interface"
              }
            },
            "stagingStorageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Name for the staging storage account using to hold kubeconfig. This value is passed into the template as an output from mgmtStagingStorage.json"
              }
            },
            "workspaceName": {
              "type": "string",
              "metadata": {
                "description": "Name for the environment Azure Log Analytics workspace"
              }
            },
            "templateBaseUrl": {
              "type": "string",
              "metadata": {
                "description": "The base URL used for accessing artifacts and automation artifacts."
              }
            },
            "flavor": {
              "type": "string",
              "defaultValue": "ITPro",
              "allowedValues": [
                "ITPro"
              ],
              "metadata": {
                "description": "The flavor of ArcBox you want to deploy. Valid values are: 'Full', 'ITPro'"
              }
            },
            "deployBastion": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Choice to deploy Bastion to connect to the client VM"
              }
            },
            "githubUser": {
              "type": "string",
              "metadata": {
                "description": "User github account where they have forked https://github.com/microsoft/azure-arc-jumpstart-apps"
              }
            },
            "vmsDiskSku": {
              "type": "string",
              "defaultValue": "Premium_LRS",
              "metadata": {
                "description": "The SKU of the VMs disk"
              }
            },
            "changeTrackingDCR": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "ChangeTracking DCR Id"
              }
            },
            "vmInsightsDCR": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "VMInsights DCR Id"
              }
            }
          },
          "variables": {
            "bastionName": "ArcBox-Bastion",
            "publicIpAddressName": "[if(equals(parameters('deployBastion'), false()), format('{0}-PIP', parameters('vmName')), format('{0}-PIP', variables('bastionName')))]",
            "networkInterfaceName": "[format('{0}-NIC', parameters('vmName'))]",
            "osDiskType": "Premium_LRS",
            "PublicIPNoBastion": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2022-01-01",
              "name": "[variables('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      },
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": "[if(equals(parameters('deployBastion'), false()), variables('PublicIPNoBastion'), null())]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('deployBastion'), false())]",
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-01-01",
              "name": "[variables('publicIpAddressName')]",
              "location": "[parameters('location')]",
              "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4",
                "idleTimeoutInMinutes": 4
              },
              "sku": {
                "name": "Basic"
              }
            },
            {
              "type": "Microsoft.Compute/disks",
              "apiVersion": "2023-04-02",
              "name": "[format('{0}-VMsDisk', parameters('vmName'))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('vmsDiskSku')]"
              },
              "properties": {
                "creationData": {
                  "createOption": "Empty"
                },
                "diskSizeGB": 1024,
                "burstingEnabled": true
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-03-01",
              "name": "[parameters('vmName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('resourceTags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[if(equals(parameters('flavor'), 'DevOps'), 'Standard_B4ms', if(equals(parameters('flavor'), 'DataOps'), 'Standard_D8s_v4', 'Standard_D16s_v5'))]"
                },
                "storageProfile": {
                  "osDisk": {
                    "name": "[format('{0}-OSDisk', parameters('vmName'))]",
                    "caching": "ReadWrite",
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "[variables('osDiskType')]"
                    },
                    "diskSizeGB": 1024
                  },
                  "imageReference": {
                    "publisher": "MicrosoftWindowsServer",
                    "offer": "WindowsServer",
                    "sku": "[parameters('windowsOSVersion')]",
                    "version": "latest"
                  },
                  "dataDisks": [
                    {
                      "createOption": "Attach",
                      "lun": 0,
                      "managedDisk": {
                        "id": "[resourceId('Microsoft.Compute/disks', format('{0}-VMsDisk', parameters('vmName')))]"
                      }
                    }
                  ]
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
                    }
                  ]
                },
                "osProfile": {
                  "computerName": "[parameters('vmName')]",
                  "adminUsername": "[parameters('windowsAdminUsername')]",
                  "adminPassword": "[parameters('windowsAdminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]",
                "[resourceId('Microsoft.Compute/disks', format('{0}-VMsDisk', parameters('vmName')))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'Bootstrap')]",
              "location": "[parameters('location')]",
              "tags": {
                "displayName": "config-bootstrap"
              },
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.10",
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                  "fileUris": [
                    "[uri(parameters('templateBaseUrl'), 'artifacts/Bootstrap.ps1')]"
                  ],
                  "commandToExecute": "[format('powershell.exe -ExecutionPolicy Bypass -File Bootstrap.ps1 -adminUsername {0} -adminPassword {1} -spnTenantId {2} -spnAuthority {3} -subscriptionId {4} -resourceGroup {5} -azdataUsername {6} -azdataPassword {7} -acceptEula {8} -arcDcName {9} -azureLocation {10} -mssqlmiName {11} -POSTGRES_NAME {12} -POSTGRES_WORKER_NODE_COUNT {13} -POSTGRES_DATASIZE {14} -POSTGRES_SERVICE_TYPE {15} -stagingStorageAccountName {16} -workspaceName {17} -templateBaseUrl {18} -flavor {19} -githubUser {20} -vmAutologon {21} -rdpPort {22} -changeTrackingDCR {23} -vmInsightsDCR {24}', parameters('windowsAdminUsername'), parameters('windowsAdminPassword'), parameters('spnTenantId'), parameters('spnAuthority'), subscription().subscriptionId, resourceGroup().name, parameters('azdataUsername'), parameters('azdataPassword'), parameters('acceptEula'), parameters('arcDcName'), parameters('location'), parameters('mssqlmiName'), parameters('postgresName'), parameters('postgresWorkerNodeCount'), parameters('postgresDatasize'), parameters('postgresServiceType'), parameters('stagingStorageAccountName'), parameters('workspaceName'), parameters('templateBaseUrl'), parameters('flavor'), parameters('githubUser'), parameters('vmAutologon'), parameters('rdpPort'), parameters('changeTrackingDCR'), parameters('vmInsightsDCR'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Authorization/roleAssignments', 'SecretOfficer')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2022-03-01', 'full').identity.principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Authorization/roleAssignments', 'CertificatesOfficer')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2022-03-01', 'full').identity.principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Authorization/roleAssignments', 'Owner')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2022-03-01', 'full').identity.principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            }
          ],
          "outputs": {
            "adminUsername": {
              "type": "string",
              "value": "[parameters('windowsAdminUsername')]"
            },
            "publicIP": {
              "type": "string",
              "value": "[if(equals(parameters('deployBastion'), false()), concat(reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName')), '2022-01-01').ipAddress), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'dataCollectionRules')]",
        "[resourceId('Microsoft.Resources/deployments', 'mgmtArtifactsAndPolicyDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'stagingStorageAccountDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "stagingStorageAccountDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "13398955536480108720"
            }
          },
          "parameters": {
            "storageAccountType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_ZRS",
                "Premium_LRS"
              ],
              "metadata": {
                "description": "Storage Account type"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources."
              }
            }
          },
          "variables": {
            "storageAccountName": "[format('arcbox{0}', uniqueString(resourceGroup().id))]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-05-01",
              "name": "[variables('storageAccountName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('storageAccountType')]"
              },
              "kind": "StorageV2",
              "properties": {
                "supportsHttpsTrafficOnly": true
              }
            }
          ],
          "outputs": {
            "storageAccountName": {
              "type": "string",
              "value": "[variables('storageAccountName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "mgmtArtifactsAndPolicyDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "workspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "flavor": {
            "value": "[parameters('flavor')]"
          },
          "deployBastion": {
            "value": "[parameters('deployBastion')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "11200813895114110716"
            }
          },
          "parameters": {
            "virtualNetworkName": {
              "type": "string",
              "defaultValue": "ArcBox-VNet",
              "metadata": {
                "description": "Name of the VNet"
              }
            },
            "subnetName": {
              "type": "string",
              "defaultValue": "ArcBox-Subnet",
              "metadata": {
                "description": "Name of the subnet in the virtual network"
              }
            },
            "aksSubnetName": {
              "type": "string",
              "defaultValue": "ArcBox-AKS-Subnet",
              "metadata": {
                "description": "Name of the subnet in the virtual network"
              }
            },
            "dcSubnetName": {
              "type": "string",
              "defaultValue": "ArcBox-DC-Subnet",
              "metadata": {
                "description": "Name of the Domain Controller subnet in the virtual network"
              }
            },
            "drVirtualNetworkName": {
              "type": "string",
              "defaultValue": "ArcBox-DR-VNet",
              "metadata": {
                "description": "Name of the DR VNet"
              }
            },
            "drSubnetName": {
              "type": "string",
              "defaultValue": "ArcBox-DR-Subnet",
              "metadata": {
                "description": "Name of the DR subnet in the DR virtual network"
              }
            },
            "workspaceName": {
              "type": "string",
              "metadata": {
                "description": "Name for your log analytics workspace"
              }
            },
            "flavor": {
              "type": "string",
              "allowedValues": [
                "Full",
                "ITPro",
                "DevOps",
                "DataOps"
              ],
              "metadata": {
                "description": "The flavor of ArcBox you want to deploy. Valid values are: 'Full', 'ITPro'"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Azure Region to deploy the Log Analytics Workspace"
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "pergb2018",
              "metadata": {
                "description": "SKU, leave default pergb2018"
              }
            },
            "deployBastion": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Choice to deploy Bastion to connect to the client VM"
              }
            },
            "networkSecurityGroupName": {
              "type": "string",
              "defaultValue": "ArcBox-NSG",
              "metadata": {
                "description": "Name of the Network Security Group"
              }
            },
            "bastionNetworkSecurityGroupName": {
              "type": "string",
              "defaultValue": "ArcBox-Bastion-NSG",
              "metadata": {
                "description": "Name of the Bastion Network Security Group"
              }
            },
            "dnsServers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "DNS Server configuration"
              }
            },
            "uniqueSuffix": {
              "type": "string",
              "defaultValue": "[substring(newGuid(), 0, 4)]"
            }
          },
          "variables": {
            "keyVaultName": "[format('arcboxkv{0}', uniqueString(resourceGroup().id, parameters('uniqueSuffix')))]",
            "security": {
              "name": "[format('Security({0})', parameters('workspaceName'))]",
              "galleryName": "Security"
            },
            "subnetAddressPrefix": "10.16.1.0/24",
            "addressPrefix": "10.16.0.0/16",
            "aksSubnetPrefix": "10.16.76.0/22",
            "dcSubnetPrefix": "10.16.2.0/24",
            "drAddressPrefix": "172.16.0.0/16",
            "drSubnetPrefix": "172.16.128.0/17",
            "bastionSubnetName": "AzureBastionSubnet",
            "bastionSubnetRef": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), variables('bastionSubnetName'))]",
            "bastionName": "ArcBox-Bastion",
            "bastionSubnetIpPrefix": "10.16.3.64/26",
            "bastionPublicIpAddressName": "[format('{0}-PIP', variables('bastionName'))]",
            "primarySubnet": [
              {
                "name": "[parameters('subnetName')]",
                "properties": {
                  "addressPrefix": "[variables('subnetAddressPrefix')]",
                  "privateEndpointNetworkPolicies": "Enabled",
                  "privateLinkServiceNetworkPolicies": "Enabled",
                  "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                  }
                }
              }
            ],
            "bastionSubnet": [
              {
                "name": "AzureBastionSubnet",
                "properties": {
                  "addressPrefix": "[variables('bastionSubnetIpPrefix')]",
                  "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNetworkSecurityGroupName'))]"
                  }
                }
              }
            ],
            "dataOpsSubnets": [
              {
                "name": "[parameters('aksSubnetName')]",
                "properties": {
                  "addressPrefix": "[variables('aksSubnetPrefix')]",
                  "privateEndpointNetworkPolicies": "Enabled",
                  "privateLinkServiceNetworkPolicies": "Enabled",
                  "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                  }
                }
              },
              {
                "name": "[parameters('dcSubnetName')]",
                "properties": {
                  "addressPrefix": "[variables('dcSubnetPrefix')]",
                  "privateEndpointNetworkPolicies": "Enabled",
                  "privateLinkServiceNetworkPolicies": "Enabled",
                  "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                  }
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-01-01",
              "name": "[parameters('virtualNetworkName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[variables('addressPrefix')]"
                  ]
                },
                "dhcpOptions": {
                  "dnsServers": "[parameters('dnsServers')]"
                },
                "subnets": "[if(and(equals(parameters('deployBastion'), false()), not(equals(parameters('flavor'), 'DataOps'))), variables('primarySubnet'), if(and(equals(parameters('deployBastion'), false()), equals(parameters('flavor'), 'DataOps')), union(variables('primarySubnet'), variables('dataOpsSubnets')), if(and(equals(parameters('deployBastion'), true()), not(equals(parameters('flavor'), 'DataOps'))), union(variables('primarySubnet'), variables('bastionSubnet')), if(and(equals(parameters('deployBastion'), true()), equals(parameters('flavor'), 'DataOps')), union(variables('primarySubnet'), variables('bastionSubnet'), variables('dataOpsSubnets')), variables('primarySubnet')))))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNetworkSecurityGroupName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('flavor'), 'DataOps')]",
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-01-01",
              "name": "[parameters('drVirtualNetworkName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[variables('drAddressPrefix')]"
                  ]
                },
                "dhcpOptions": {
                  "dnsServers": "[parameters('dnsServers')]"
                },
                "subnets": [
                  {
                    "name": "[parameters('drSubnetName')]",
                    "properties": {
                      "addressPrefix": "[variables('drSubnetPrefix')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('flavor'), 'DataOps')]",
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2022-01-01",
              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), 'peering-to-DR-vnet')]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('drVirtualNetworkName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('drVirtualNetworkName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('flavor'), 'DataOps')]",
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2022-01-01",
              "name": "[format('{0}/{1}', parameters('drVirtualNetworkName'), 'peering-to-primary-vnet')]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('drVirtualNetworkName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-01-01",
              "name": "[parameters('networkSecurityGroupName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "allow_k8s_80",
                    "properties": {
                      "priority": 1003,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "80"
                    }
                  },
                  {
                    "name": "allow_k8s_8080",
                    "properties": {
                      "priority": 1004,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "8080"
                    }
                  },
                  {
                    "name": "allow_k8s_443",
                    "properties": {
                      "priority": 1005,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "443"
                    }
                  },
                  {
                    "name": "allow_k8s_kubelet",
                    "properties": {
                      "priority": 1006,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "10250"
                    }
                  },
                  {
                    "name": "allow_traefik_lb_external",
                    "properties": {
                      "priority": 1007,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "32323"
                    }
                  },
                  {
                    "name": "allow_SQLMI_traffic",
                    "properties": {
                      "priority": 1008,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "11433"
                    }
                  },
                  {
                    "name": "allow_Postgresql_traffic",
                    "properties": {
                      "priority": 1009,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "15432"
                    }
                  },
                  {
                    "name": "allow_SQLMI_mirroring_traffic",
                    "properties": {
                      "priority": 1012,
                      "protocol": "TCP",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "5022"
                    }
                  }
                ]
              }
            },
            {
              "condition": "[equals(parameters('deployBastion'), true())]",
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-01-01",
              "name": "[parameters('bastionNetworkSecurityGroupName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "bastion_allow_https_inbound",
                    "properties": {
                      "priority": 1010,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "Internet",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "443"
                    }
                  },
                  {
                    "name": "bastion_allow_gateway_manager_inbound",
                    "properties": {
                      "priority": 1011,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "GatewayManager",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "443"
                    }
                  },
                  {
                    "name": "bastion_allow_load_balancer_inbound",
                    "properties": {
                      "priority": 1012,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "AzureLoadBalancer",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "443"
                    }
                  },
                  {
                    "name": "bastion_allow_host_comms",
                    "properties": {
                      "priority": 1013,
                      "protocol": "*",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "destinationPortRanges": [
                        "8080",
                        "5701"
                      ]
                    }
                  },
                  {
                    "name": "bastion_allow_ssh_rdp_outbound",
                    "properties": {
                      "priority": 1014,
                      "protocol": "*",
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "destinationPortRanges": [
                        "22",
                        "3389"
                      ]
                    }
                  },
                  {
                    "name": "bastion_allow_azure_cloud_outbound",
                    "properties": {
                      "priority": 1015,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "AzureCloud",
                      "destinationPortRange": "443"
                    }
                  },
                  {
                    "name": "bastion_allow_bastion_comms",
                    "properties": {
                      "priority": 1016,
                      "protocol": "*",
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "destinationPortRanges": [
                        "8080",
                        "5701"
                      ]
                    }
                  },
                  {
                    "name": "bastion_allow_get_session_info",
                    "properties": {
                      "priority": 1017,
                      "protocol": "*",
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "Internet",
                      "destinationPortRanges": [
                        "80",
                        "443"
                      ]
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-06-01",
              "name": "[parameters('workspaceName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "name": "[parameters('sku')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationsManagement/solutions",
              "apiVersion": "2015-11-01-preview",
              "name": "[variables('security').name]",
              "location": "[parameters('location')]",
              "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
              },
              "plan": {
                "name": "[variables('security').name]",
                "promotionCode": "",
                "product": "[format('OMSGallery/{0}', variables('security').galleryName)]",
                "publisher": "Microsoft"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('deployBastion'), true())]",
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-01-01",
              "name": "[variables('bastionPublicIpAddressName')]",
              "location": "[parameters('location')]",
              "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4",
                "idleTimeoutInMinutes": 4
              },
              "sku": {
                "name": "Standard"
              }
            },
            {
              "condition": "[equals(parameters('deployBastion'), true())]",
              "type": "Microsoft.Network/bastionHosts",
              "apiVersion": "2023-11-01",
              "name": "[variables('bastionName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "IpConf",
                    "properties": {
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIpAddressName'))]"
                      },
                      "subnet": {
                        "id": "[variables('bastionSubnetRef')]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIpAddressName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "keyVaultDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('keyVaultName')]"
                  },
                  "enablePurgeProtection": {
                    "value": false
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "12538315610403519820"
                    },
                    "name": "Key Vaults",
                    "description": "This module deploys a Key Vault.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateEndpointType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private endpoint."
                            }
                          },
                          "location": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The location to deploy the private endpoint to."
                            }
                          },
                          "privateLinkServiceConnectionName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private link connection to create."
                            }
                          },
                          "service": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
                            }
                          },
                          "subnetResourceId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                            }
                          },
                          "privateDnsZoneGroupName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                            }
                          },
                          "privateDnsZoneResourceIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
                            }
                          },
                          "isManualConnection": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. If Manual Private Link Connection is required."
                            }
                          },
                          "manualConnectionRequestMessage": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 140,
                            "metadata": {
                              "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                            }
                          },
                          "customDnsConfigs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Required. Fqdn that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Custom DNS configurations."
                            }
                          },
                          "ipConfigurations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                            }
                          },
                          "applicationSecurityGroupResourceIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                            }
                          },
                          "customNetworkInterfaceName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The custom name of the network interface attached to the private endpoint."
                            }
                          },
                          "lock": {
                            "$ref": "#/definitions/lockType",
                            "metadata": {
                              "description": "Optional. Specify the type of lock."
                            }
                          },
                          "roleAssignments": {
                            "$ref": "#/definitions/roleAssignmentType",
                            "metadata": {
                              "description": "Optional. Array of role assignments to create."
                            }
                          },
                          "tags": {
                            "type": "object",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                            }
                          },
                          "enableTelemetry": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Enable/Disable usage telemetry for module."
                            }
                          },
                          "resourceGroupName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "accessPoliciesType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tenantId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The tenant ID that is used for authenticating requests to the key vault."
                            }
                          },
                          "objectId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The object ID of a user, service principal or security group in the tenant for the vault."
                            }
                          },
                          "applicationId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Application ID of the client making request on behalf of a principal."
                            }
                          },
                          "permissions": {
                            "type": "object",
                            "properties": {
                              "keys": {
                                "type": "array",
                                "allowedValues": [
                                  "all",
                                  "backup",
                                  "create",
                                  "decrypt",
                                  "delete",
                                  "encrypt",
                                  "get",
                                  "getrotationpolicy",
                                  "import",
                                  "list",
                                  "purge",
                                  "recover",
                                  "release",
                                  "restore",
                                  "rotate",
                                  "setrotationpolicy",
                                  "sign",
                                  "unwrapKey",
                                  "update",
                                  "verify",
                                  "wrapKey"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Permissions to keys."
                                }
                              },
                              "secrets": {
                                "type": "array",
                                "allowedValues": [
                                  "all",
                                  "backup",
                                  "delete",
                                  "get",
                                  "list",
                                  "purge",
                                  "recover",
                                  "restore",
                                  "set"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Permissions to secrets."
                                }
                              },
                              "certificates": {
                                "type": "array",
                                "allowedValues": [
                                  "all",
                                  "backup",
                                  "create",
                                  "delete",
                                  "deleteissuers",
                                  "get",
                                  "getissuers",
                                  "import",
                                  "list",
                                  "listissuers",
                                  "managecontacts",
                                  "manageissuers",
                                  "purge",
                                  "recover",
                                  "restore",
                                  "setissuers",
                                  "update"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Permissions to certificates."
                                }
                              },
                              "storage": {
                                "type": "array",
                                "allowedValues": [
                                  "all",
                                  "backup",
                                  "delete",
                                  "deletesas",
                                  "get",
                                  "getsas",
                                  "list",
                                  "listsas",
                                  "purge",
                                  "recover",
                                  "regeneratekey",
                                  "restore",
                                  "set",
                                  "setsas",
                                  "update"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Permissions to storage accounts."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Permissions the identity has for keys, secrets and certificates."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Required. Name of the Key Vault. Must be globally unique."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "accessPolicies": {
                      "$ref": "#/definitions/accessPoliciesType",
                      "metadata": {
                        "description": "Optional. All access policies to create."
                      }
                    },
                    "secrets": {
                      "type": "secureObject",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. All secrets to create."
                      }
                    },
                    "keys": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. All keys to create."
                      }
                    },
                    "enableVaultForDeployment": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the vault is enabled for deployment by script or compute."
                      }
                    },
                    "enableVaultForTemplateDeployment": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the vault is enabled for a template deployment."
                      }
                    },
                    "enableVaultForDiskEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
                      }
                    },
                    "enableSoftDelete": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Switch to enable/disable Key Vault's soft delete feature."
                      }
                    },
                    "softDeleteRetentionInDays": {
                      "type": "int",
                      "defaultValue": 90,
                      "metadata": {
                        "description": "Optional. softDelete data retention days. It accepts >=7 and <=90."
                      }
                    },
                    "enableRbacAuthorization": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. Note that management actions are always authorized with RBAC."
                      }
                    },
                    "createMode": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The vault's create mode to indicate whether the vault need to be recovered or not. - recover or default."
                      }
                    },
                    "enablePurgeProtection": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Provide 'true' to enable Key Vault's purge protection feature."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "premium",
                      "allowedValues": [
                        "premium",
                        "standard"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the SKU for the vault."
                      }
                    },
                    "networkAcls": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Rules governing the accessibility of the resource from specific network locations."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "privateEndpoints": {
                      "$ref": "#/definitions/privateEndpointType",
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedAccessPolicies",
                        "count": "[length(coalesce(parameters('accessPolicies'), createArray()))]",
                        "input": {
                          "applicationId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'applicationId'), '')]",
                          "objectId": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].objectId]",
                          "permissions": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].permissions]",
                          "tenantId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'tenantId'), tenant().tenantId)]"
                        }
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                      "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                      "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                      "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                      "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                      "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                      "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                      "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    },
                    "secretList": "[coalesce(tryGet(parameters('secrets'), 'secureList'), createArray())]"
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.keyvault-vault.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "keyVault": {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                        "enabledForTemplateDeployment": "[parameters('enableVaultForTemplateDeployment')]",
                        "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
                        "enableSoftDelete": "[parameters('enableSoftDelete')]",
                        "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                        "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                        "createMode": "[parameters('createMode')]",
                        "enablePurgeProtection": "[if(parameters('enablePurgeProtection'), parameters('enablePurgeProtection'), null())]",
                        "tenantId": "[subscription().tenantId]",
                        "accessPolicies": "[variables('formattedAccessPolicies')]",
                        "sku": {
                          "name": "[parameters('sku')]",
                          "family": "A"
                        },
                        "networkAcls": "[if(not(empty(coalesce(parameters('networkAcls'), createObject()))), createObject('bypass', tryGet(parameters('networkAcls'), 'bypass'), 'defaultAction', tryGet(parameters('networkAcls'), 'defaultAction'), 'virtualNetworkRules', coalesce(tryGet(parameters('networkAcls'), 'virtualNetworkRules'), createArray()), 'ipRules', coalesce(tryGet(parameters('networkAcls'), 'ipRules'), createArray())), null())]",
                        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(coalesce(parameters('privateEndpoints'), createArray()))), empty(coalesce(parameters('networkAcls'), createObject()))), 'Disabled', null()))]"
                      }
                    },
                    "keyVault_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_diagnosticSettings": {
                      "copy": {
                        "name": "keyVault_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_roleAssignments": {
                      "copy": {
                        "name": "keyVault_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_accessPolicies": {
                      "condition": "[not(empty(parameters('accessPolicies')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-KeyVault-AccessPolicies', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "accessPolicies": {
                            "value": "[parameters('accessPolicies')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "10878813547461142217"
                            },
                            "name": "Key Vault Access Policies",
                            "description": "This module deploys a Key Vault Access Policy.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "accessPoliciesType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The tenant ID that is used for authenticating requests to the key vault."
                                    }
                                  },
                                  "objectId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The object ID of a user, service principal or security group in the tenant for the vault."
                                    }
                                  },
                                  "applicationId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Application ID of the client making request on behalf of a principal."
                                    }
                                  },
                                  "permissions": {
                                    "type": "object",
                                    "properties": {
                                      "keys": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "create",
                                          "decrypt",
                                          "delete",
                                          "encrypt",
                                          "get",
                                          "getrotationpolicy",
                                          "import",
                                          "list",
                                          "purge",
                                          "recover",
                                          "release",
                                          "restore",
                                          "rotate",
                                          "setrotationpolicy",
                                          "sign",
                                          "unwrapKey",
                                          "update",
                                          "verify",
                                          "wrapKey"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to keys."
                                        }
                                      },
                                      "secrets": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "delete",
                                          "get",
                                          "list",
                                          "purge",
                                          "recover",
                                          "restore",
                                          "set"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to secrets."
                                        }
                                      },
                                      "certificates": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "create",
                                          "delete",
                                          "deleteissuers",
                                          "get",
                                          "getissuers",
                                          "import",
                                          "list",
                                          "listissuers",
                                          "managecontacts",
                                          "manageissuers",
                                          "purge",
                                          "recover",
                                          "restore",
                                          "setissuers",
                                          "update"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to certificates."
                                        }
                                      },
                                      "storage": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "delete",
                                          "deletesas",
                                          "get",
                                          "getsas",
                                          "list",
                                          "listsas",
                                          "purge",
                                          "recover",
                                          "regeneratekey",
                                          "restore",
                                          "set",
                                          "setsas",
                                          "update"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to storage accounts."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Permissions the identity has for keys, secrets and certificates."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "accessPolicies": {
                              "$ref": "#/definitions/accessPoliciesType",
                              "metadata": {
                                "description": "Optional. An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedAccessPolicies",
                                "count": "[length(coalesce(parameters('accessPolicies'), createArray()))]",
                                "input": {
                                  "applicationId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'applicationId'), '')]",
                                  "objectId": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].objectId]",
                                  "permissions": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].permissions]",
                                  "tenantId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'tenantId'), tenant().tenantId)]"
                                }
                              }
                            ]
                          },
                          "resources": {
                            "keyVault": {
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('keyVaultName')]"
                            },
                            "policies": {
                              "type": "Microsoft.KeyVault/vaults/accessPolicies",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'add')]",
                              "properties": {
                                "accessPolicies": "[variables('formattedAccessPolicies')]"
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the access policies assignment was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the access policies assignment."
                              },
                              "value": "add"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the access policies assignment."
                              },
                              "value": "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), 'add')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_secrets": {
                      "copy": {
                        "name": "keyVault_secrets",
                        "count": "[length(variables('secretList'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-KeyVault-Secret-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('secretList')[copyIndex()].name]"
                          },
                          "value": {
                            "value": "[variables('secretList')[copyIndex()].value]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "attributesEnabled": {
                            "value": "[tryGet(variables('secretList')[copyIndex()], 'attributesEnabled')]"
                          },
                          "attributesExp": {
                            "value": "[tryGet(variables('secretList')[copyIndex()], 'attributesExp')]"
                          },
                          "attributesNbf": {
                            "value": "[tryGet(variables('secretList')[copyIndex()], 'attributesNbf')]"
                          },
                          "contentType": {
                            "value": "[tryGet(variables('secretList')[copyIndex()], 'contentType')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(variables('secretList')[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(variables('secretList')[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "1877278864243602204"
                            },
                            "name": "Key Vault Secrets",
                            "description": "This module deploys a Key Vault Secret.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the secret."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource tags."
                              }
                            },
                            "attributesEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Determines whether the object is enabled."
                              }
                            },
                            "attributesExp": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                              }
                            },
                            "attributesNbf": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                              }
                            },
                            "contentType": {
                              "type": "securestring",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The content type of the secret."
                              }
                            },
                            "value": {
                              "type": "securestring",
                              "metadata": {
                                "description": "Required. The value of the secret. NOTE: \"value\" will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                              "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                              "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                              "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                              "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                              "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                              "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                              "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                              "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "keyVault": {
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('keyVaultName')]"
                            },
                            "secret": {
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "contentType": "[parameters('contentType')]",
                                "attributes": {
                                  "enabled": "[parameters('attributesEnabled')]",
                                  "exp": "[parameters('attributesExp')]",
                                  "nbf": "[parameters('attributesNbf')]"
                                },
                                "value": "[parameters('value')]"
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "secret_roleAssignments": {
                              "copy": {
                                "name": "secret_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}/secrets/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "secret"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the secret."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the secret."
                              },
                              "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the secret was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_keys": {
                      "copy": {
                        "name": "keyVault_keys",
                        "count": "[length(coalesce(parameters('keys'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-KeyVault-Key-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('keys'), createArray())[copyIndex()].name]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "attributesEnabled": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributesEnabled')]"
                          },
                          "attributesExp": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributesExp')]"
                          },
                          "attributesNbf": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributesNbf')]"
                          },
                          "curveName": {
                            "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'curveName'), 'P-256')]"
                          },
                          "keyOps": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'keyOps')]"
                          },
                          "keySize": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'keySize')]"
                          },
                          "kty": {
                            "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'EC')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "rotationPolicy": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'rotationPolicy')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "5903918450419813264"
                            },
                            "name": "Key Vault Keys",
                            "description": "This module deploys a Key Vault Key.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the key."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource tags."
                              }
                            },
                            "attributesEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Determines whether the object is enabled."
                              }
                            },
                            "attributesExp": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                              }
                            },
                            "attributesNbf": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                              }
                            },
                            "curveName": {
                              "type": "string",
                              "defaultValue": "P-256",
                              "allowedValues": [
                                "P-256",
                                "P-256K",
                                "P-384",
                                "P-521"
                              ],
                              "metadata": {
                                "description": "Optional. The elliptic curve name."
                              }
                            },
                            "keyOps": {
                              "type": "array",
                              "nullable": true,
                              "allowedValues": [
                                "decrypt",
                                "encrypt",
                                "import",
                                "sign",
                                "unwrapKey",
                                "verify",
                                "wrapKey"
                              ],
                              "metadata": {
                                "description": "Optional. Array of JsonWebKeyOperation."
                              }
                            },
                            "keySize": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The key size in bits. For example: 2048, 3072, or 4096 for RSA."
                              }
                            },
                            "kty": {
                              "type": "string",
                              "defaultValue": "EC",
                              "allowedValues": [
                                "EC",
                                "EC-HSM",
                                "RSA",
                                "RSA-HSM"
                              ],
                              "metadata": {
                                "description": "Optional. The type of the key."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "rotationPolicy": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Key rotation policy properties object."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                              "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                              "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                              "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                              "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                              "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                              "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                              "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                              "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "keyVault": {
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('keyVaultName')]"
                            },
                            "key": {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "attributes": {
                                  "enabled": "[parameters('attributesEnabled')]",
                                  "exp": "[parameters('attributesExp')]",
                                  "nbf": "[parameters('attributesNbf')]"
                                },
                                "curveName": "[parameters('curveName')]",
                                "keyOps": "[parameters('keyOps')]",
                                "keySize": "[parameters('keySize')]",
                                "kty": "[parameters('kty')]",
                                "rotationPolicy": "[parameters('rotationPolicy')]"
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "key_roleAssignments": {
                              "copy": {
                                "name": "key_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "key"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the key."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the key."
                              },
                              "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the key was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_privateEndpoints": {
                      "copy": {
                        "name": "keyVault_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-keyVault-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex()))]"
                          },
                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault')))))), createObject('value', null()))]",
                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroupName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
                          },
                          "privateDnsZoneResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "4120048060064073955"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "ipConfigurationsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the resource that is unique within a resource group."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "memberName": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateIPAddress": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private endpoint IP configurations."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "manualPrivateLinkServiceConnectionsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the private link service connection."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupIds": {
                                        "type": "array",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateLinkServiceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of private link service."
                                        }
                                      },
                                      "requestMessage": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private link service connection."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateLinkServiceConnectionsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the private link service connection."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupIds": {
                                        "type": "array",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateLinkServiceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of private link service."
                                        }
                                      },
                                      "requestMessage": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private link service connection."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "customDnsConfigType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "fqdn": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Fqdn that resolves to private endpoint IP address."
                                    }
                                  },
                                  "ipAddresses": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "description": "Required. A list of private IP addresses of the private endpoint."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "$ref": "#/definitions/ipConfigurationsType",
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroupName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                              }
                            },
                            "privateDnsZoneResourceIds": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "$ref": "#/definitions/customDnsConfigType",
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "$ref": "#/definitions/privateLinkServiceConnectionsType",
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                                  },
                                  "privateDNSResourceIds": {
                                    "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.25.53.49325",
                                      "templateHash": "11244630631275470040"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDNSResourceIds": {
                                      "type": "array",
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(parameters('privateDNSResourceIds'))]",
                                        "input": {
                                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2023-04-01', 'full').location]"
                            },
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "The group Id for the private endpoint Group."
                              },
                              "value": "[if(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties.groupIds[0], reference('privateEndpoint').privateLinkServiceConnections[0].properties.groupIds[0])]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the key vault."
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the key vault was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the key vault."
                      },
                      "value": "[parameters('name')]"
                    },
                    "uri": {
                      "type": "string",
                      "metadata": {
                        "description": "The URI of the key vault."
                      },
                      "value": "[reference('keyVault').vaultUri]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('keyVault', '2022-07-01', 'full').location]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "vnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            },
            "subnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2022-01-01').subnets[0].id]"
            },
            "workspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "monitoringResources",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "workspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'mgmtArtifactsAndPolicyDeployment'), '2022-09-01').outputs.workspaceId.value]"
          },
          "workspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "emailAddress": {
            "value": "[parameters('emailAddress')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "3605065425905209050"
            }
          },
          "parameters": {
            "workspaceName": {
              "type": "string",
              "metadata": {
                "description": "Name of the workspace."
              }
            },
            "workspaceId": {
              "type": "string",
              "metadata": {
                "description": "Id of the workspace."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Specifies the location in which to create the workspace."
              }
            },
            "emailAddress": {
              "type": "string",
              "metadata": {
                "description": "Short name up to 12 characters for the Action group."
              }
            }
          },
          "variables": {
            "actionGroupName": "ag-arc-servers",
            "alertsSeverity": 2,
            "windowSize": "PT15M",
            "evaluationFrequency": "PT5M",
            "convertRuleTag": "hidden-link:",
            "singlequote": "'",
            "azureDashboardName": "Azure Arc-enabled servers",
            "windowsEventsWorkbookName": "Windows Event Logs",
            "osPerformanceWorkbookName": "OS Performance and Capacity",
            "alertsConsoleWorkbookName": "Azure Monitor Alerts",
            "windowsEventsWorkbookContent": {
              "version": "Notebook/1.0",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "# Event Logs"
                  },
                  "name": "text - 7"
                },
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "crossComponentResources": [
                      "value::all"
                    ],
                    "parameters": [
                      {
                        "id": "2cf5311e-e4c3-4cbd-91d9-94f2e139ed50",
                        "version": "KqlParameterItem/1.0",
                        "name": "TimeRange",
                        "type": 4,
                        "value": {
                          "durationMs": 604800000
                        },
                        "typeSettings": {
                          "selectableValues": [
                            {
                              "durationMs": 3600000
                            },
                            {
                              "durationMs": 86400000
                            },
                            {
                              "durationMs": 604800000
                            },
                            {
                              "durationMs": 2592000000
                            }
                          ]
                        },
                        "timeContext": {
                          "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange"
                      },
                      {
                        "id": "b31e4dd2-f34c-4455-86e7-9d7785586ba2",
                        "version": "KqlParameterItem/1.0",
                        "name": "Workspace",
                        "type": 5,
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "where type =~ 'microsoft.operationalinsights/workspaces'\r\n| summarize by id, name\r\n",
                        "crossComponentResources": [
                          "value::all"
                        ],
                        "value": [
                          "[parameters('workspaceId')]"
                        ],
                        "typeSettings": {
                          "additionalResourceOptions": []
                        },
                        "queryType": 1,
                        "resourceType": "microsoft.resourcegraph/resources"
                      }
                    ],
                    "style": "pills",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources"
                  },
                  "name": "parameters - 2"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n|  where EventLog in (\"System\",\"Application\",\"Operations Manager\")\r\n| project EventLog,EventLevelName\r\n| evaluate pivot(EventLevelName)",
                    "size": 1,
                    "showAnalytics": true,
                    "title": "Windows Events - Summary",
                    "timeContext": {
                      "durationMs": 0
                    },
                    "timeContextFromParameter": "TimeRange",
                    "exportFieldName": "EventLog",
                    "exportParameterName": "EventLog",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Information",
                          "formatter": 18,
                          "formatOptions": {
                            "showIcon": true,
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "info",
                                "text": "{0}{1}"
                              }
                            ],
                            "aggregation": "Unique"
                          },
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        },
                        {
                          "columnMatch": "Warning",
                          "formatter": 18,
                          "formatOptions": {
                            "showIcon": true,
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "warning",
                                "text": "{0}{1}"
                              }
                            ],
                            "aggregation": "Unique"
                          },
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        },
                        {
                          "columnMatch": "Error",
                          "formatter": 18,
                          "formatOptions": {
                            "showIcon": true,
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "3",
                                "text": "{0}{1}"
                              }
                            ],
                            "aggregation": "Unique"
                          },
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "customWidth": "50",
                  "showPin": true,
                  "name": "query - 0"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n|  where EventLog == \"{EventLog}\" and EventID != 0\r\n| summarize count() by bin(TimeGenerated, 1h),EventLevelName\r\n| sort by TimeGenerated desc\r\n",
                    "size": 0,
                    "showAnalytics": true,
                    "title": "Events count hourly distribution",
                    "timeContext": {
                      "durationMs": 0
                    },
                    "timeContextFromParameter": "TimeRange",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "visualization": "areachart",
                    "chartSettings": {
                      "seriesLabelSettings": [
                        {
                          "seriesName": "Information",
                          "color": "blue"
                        },
                        {
                          "seriesName": "Warning",
                          "color": "yellow"
                        },
                        {
                          "seriesName": "Error",
                          "color": "red"
                        }
                      ]
                    }
                  },
                  "customWidth": "50",
                  "showPin": true,
                  "name": "query - 6"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n|  where EventLog == \"{EventLog}\" and EventLevelName == \"Error\"\r\n| summarize Count=count() by Computer, EventLog, EventLevelName\r\n| sort by Count\r\n",
                    "size": 0,
                    "showAnalytics": true,
                    "title": "Error Events",
                    "timeContext": {
                      "durationMs": 0
                    },
                    "timeContextFromParameter": "TimeRange",
                    "exportedParameters": [
                      {
                        "fieldName": "Computer",
                        "parameterName": "Computer",
                        "parameterType": 1
                      },
                      {
                        "fieldName": "EventLog",
                        "parameterName": "EventLog",
                        "parameterType": 1
                      },
                      {
                        "fieldName": "Count",
                        "parameterName": "Count",
                        "parameterType": 1
                      },
                      {
                        "fieldName": "EventLevelName",
                        "parameterName": "EventLevelName",
                        "parameterType": 1
                      }
                    ],
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "EventLog",
                          "formatter": 5,
                          "formatOptions": {
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "EventLevelName",
                          "formatter": 5,
                          "formatOptions": {
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Count",
                          "formatter": 8,
                          "formatOptions": {
                            "min": 0,
                            "palette": "red",
                            "showIcon": true
                          }
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "showPin": true,
                  "name": "query - 3"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n|  where EventLog == \"{EventLog}\" and EventLevelName == \"Warning\"\r\n| summarize Count=count() by Computer, EventLog,EventLevelName\r\n| sort by Count\r\n",
                    "size": 0,
                    "showAnalytics": true,
                    "title": "Warning Events",
                    "timeContext": {
                      "durationMs": 0
                    },
                    "timeContextFromParameter": "TimeRange",
                    "exportedParameters": [
                      {
                        "fieldName": "Computer",
                        "parameterName": "Computer",
                        "parameterType": 1
                      },
                      {
                        "fieldName": "EventLog",
                        "parameterName": "EventLog",
                        "parameterType": 1
                      },
                      {
                        "fieldName": "Count",
                        "parameterName": "Count",
                        "parameterType": 1
                      },
                      {
                        "fieldName": "EventLevelName",
                        "parameterName": "EventLevelName",
                        "parameterType": 1
                      }
                    ],
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "EventLog",
                          "formatter": 5,
                          "formatOptions": {
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "EventLevelName",
                          "formatter": 5,
                          "formatOptions": {
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Count",
                          "formatter": 8,
                          "formatOptions": {
                            "min": 0,
                            "palette": "yellow",
                            "showIcon": true
                          }
                        }
                      ]
                    }
                  },
                  "customWidth": "34",
                  "showPin": true,
                  "name": "query - 2"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n|  where EventLog == \"{EventLog}\" and EventLevelName == \"Information\"\r\n| summarize Count=count() by Computer, EventLog,EventLevelName\r\n| sort by Count\r\n",
                    "size": 0,
                    "showAnalytics": true,
                    "title": "Information Events",
                    "timeContext": {
                      "durationMs": 0
                    },
                    "timeContextFromParameter": "TimeRange",
                    "exportedParameters": [
                      {
                        "fieldName": "Computer",
                        "parameterName": "Computer",
                        "parameterType": 1
                      },
                      {
                        "fieldName": "EventLog",
                        "parameterName": "EventLog",
                        "parameterType": 1
                      },
                      {
                        "fieldName": "Count",
                        "parameterName": "Count",
                        "parameterType": 1
                      },
                      {
                        "fieldName": "EventLevelName",
                        "parameterName": "EventLevelName",
                        "parameterType": 1
                      }
                    ],
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "EventLog",
                          "formatter": 5,
                          "formatOptions": {
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "EventLevelName",
                          "formatter": 5,
                          "formatOptions": {
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Count",
                          "formatter": 8,
                          "formatOptions": {
                            "min": 0,
                            "palette": "blue",
                            "showIcon": true
                          }
                        }
                      ]
                    }
                  },
                  "customWidth": "33",
                  "showPin": true,
                  "name": "query - 4"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Event\r\n|  where EventLog == \"{EventLog}\" and EventLevelName == \"{EventLevelName}\" and Computer == \"{Computer}\" and EventID != 0\r\n| project TimeGenerated,Computer, EventLog, [\"Level\"]=EventLevelName, [\"Rendered Description\"]=RenderedDescription\r\n| sort by Computer, EventLog, [\"Level\"]\r\n\r\n",
                    "size": 0,
                    "showAnalytics": true,
                    "title": "Event ID Description",
                    "timeContext": {
                      "durationMs": 0
                    },
                    "timeContextFromParameter": "TimeRange",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Level",
                          "formatter": 18,
                          "formatOptions": {
                            "showIcon": true,
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Error",
                                "representation": "error",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Warning",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Information",
                                "representation": "info",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "tileSettings": {
                      "showBorder": false
                    },
                    "graphSettings": {
                      "type": 0
                    }
                  },
                  "showPin": true,
                  "name": "query - 5"
                }
              ],
              "isLocked": false,
              "fallbackResourceIds": [
                "Azure Monitor"
              ]
            },
            "osPerformanceWorkbookContent": {
              "version": "Notebook/1.0",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "# Operating System - Performance and capacity"
                  },
                  "name": "text - 0"
                },
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "parameters": [
                      {
                        "id": "b82b64ff-f991-4f44-ac88-aee7c086cc48",
                        "version": "KqlParameterItem/1.0",
                        "name": "TimeRange",
                        "type": 4,
                        "isRequired": true,
                        "value": {
                          "durationMs": 86400000
                        },
                        "typeSettings": {
                          "selectableValues": [
                            {
                              "durationMs": 3600000
                            },
                            {
                              "durationMs": 43200000
                            },
                            {
                              "durationMs": 86400000
                            },
                            {
                              "durationMs": 259200000
                            },
                            {
                              "durationMs": 604800000
                            },
                            {
                              "durationMs": 1209600000
                            },
                            {
                              "durationMs": 2592000000
                            }
                          ],
                          "allowCustom": true
                        }
                      },
                      {
                        "id": "e1ecac91-1691-4f48-b4c0-803e39e00f43",
                        "version": "KqlParameterItem/1.0",
                        "name": "Workspace",
                        "type": 5,
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "where type =~ 'microsoft.operationalinsights/workspaces'\r\n| summarize by id, name\r\n",
                        "crossComponentResources": [
                          "value::all"
                        ],
                        "value": [
                          "[parameters('workspaceId')]"
                        ],
                        "typeSettings": {
                          "additionalResourceOptions": []
                        },
                        "timeContext": {
                          "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange",
                        "queryType": 1,
                        "resourceType": "microsoft.resourcegraph/resources"
                      },
                      {
                        "id": "fb251a5f-fd61-44fe-853b-d31624075420",
                        "version": "KqlParameterItem/1.0",
                        "name": "ComputerFilter",
                        "type": 1,
                        "isHiddenWhenLocked": true,
                        "timeContext": {
                          "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange",
                        "value": ""
                      },
                      {
                        "id": "787717b8-68fe-4d5a-a57d-ed900f7d8981",
                        "version": "KqlParameterItem/1.0",
                        "name": "Counter",
                        "type": 2,
                        "isRequired": true,
                        "query": "Perf\r\n| where TimeGenerated {TimeRange}\r\n| summarize by CounterName, ObjectName, CounterText = CounterName\r\n| order by ObjectName asc, CounterText asc\r\n| project Counter = pack('counter', CounterName, 'object', ObjectName), CounterText, group = ObjectName",
                        "crossComponentResources": [
                          "{Workspace}"
                        ],
                        "isHiddenWhenLocked": true,
                        "typeSettings": {
                          "additionalResourceOptions": []
                        },
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces"
                      },
                      {
                        "id": "852b924f-41bc-4081-a0b6-c758873e702d",
                        "version": "KqlParameterItem/1.0",
                        "name": "Order",
                        "type": 2,
                        "isRequired": true,
                        "isHiddenWhenLocked": true,
                        "typeSettings": {
                          "additionalResourceOptions": []
                        },
                        "jsonData": "[[\r\n    { \"value\":\"asc\", \"label\":\"asc\", \"selected\": false },\r\n    { \"value\":\"desc\", \"label\":\"desc\", \"selected\": true }\r\n]",
                        "timeContext": {
                          "durationMs": 0
                        },
                        "timeContextFromParameter": "TimeRange"
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.insights/components"
                  },
                  "name": "parameters - 1"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let trend = ( Heartbeat\r\n   | make-series InternalTrend=iff(count() > 0, 1, 0) default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step 15m by Computer\r\n    | extend Trend=array_slice(InternalTrend, array_length(InternalTrend) - 30, array_length(InternalTrend)-1)); \r\n\r\nlet PerfCPU = (Perf\r\n    | where ObjectName contains \"Processor\" and CounterName == \"% Processor Time\" and (InstanceName==\"_Total\" or InstanceName==\"total\")\r\n    | summarize AvgCPU=round(avg(CounterValue),2), MaxCPU=round(max(CounterValue),2) by Computer\r\n    | extend StatusCPU = case (\r\n                  AvgCPU > 80, 2,\r\n                  AvgCPU > 50, 1,\r\n                  AvgCPU <= 50, 0, -1\r\n                )\r\n    );\r\n\r\nlet PerfMemory = (Perf\r\n    | where ObjectName contains \"Memory\" and (CounterName == \"Available Bytes\" or CounterName == \"Available MBytes Memory\")\r\n    | summarize AvgMEM=round(avg(CounterValue/1024),2), MaxMEM=round(max(CounterValue/1024),2) by Computer\r\n    | extend StatusMEM = case (\r\n                  AvgMEM > 4, 0,\r\n                  AvgMEM >= 1, 1,\r\n                  AvgMEM < 1, 2, -1\r\n            )\r\n    );\r\n\r\nlet PerfDisk = (Perf\r\n    | where (ObjectName == \"LogicalDisk\" or ObjectName == \"Logical Disk\") and CounterName == \"Free Megabytes\" and (InstanceName == \"_Total\" or InstanceName == \"/\")\r\n    | summarize AvgDisk=round(avg(CounterValue),2), (TimeGenerated,LastDisk)=arg_max(TimeGenerated,round(CounterValue,2)) by Computer\r\n    | extend StatusDisk = case (\r\n                  AvgDisk < 5000, 2,\r\n                  AvgDisk < 30000, 1,\r\n                  AvgDisk >= 30000, 0,-1\r\n)\r\n    | project Computer, AvgDisk , LastDisk ,StatusDisk\r\n    );\r\nPerfCPU\r\n| join (PerfMemory) on Computer\r\n| join (PerfDisk) on Computer\r\n| join (trend) on Computer\r\n| project Computer,StatusCPU, AvgCPU,MaxCPU,StatusMEM,AvgMEM,MaxMEM,StatusDisk,AvgDisk,LastDisk, Trend\r\n| sort by Computer ",
                    "size": 0,
                    "showAnalytics": true,
                    "title": "Top servers (data aggregated based on TimeRange)",
                    "timeContextFromParameter": "TimeRange",
                    "exportFieldName": "Computer",
                    "exportParameterName": "Computer",
                    "exportDefaultValue": "All",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "StatusCPU",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "success",
                                "text": "{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "2",
                                "text": "{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "4",
                                "text": "{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Unknown",
                                "text": "{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "AvgCPU",
                          "formatter": 2,
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        },
                        {
                          "columnMatch": "MaxCPU",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        },
                        {
                          "columnMatch": "StatusMEM",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "success",
                                "text": "{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "2",
                                "text": "{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "critical",
                                "text": "{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "AvgMEM",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 5,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        },
                        {
                          "columnMatch": "MaxMEM",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 39,
                            "options": {
                              "style": "decimal",
                              "maximumFractionDigits": 2
                            }
                          }
                        },
                        {
                          "columnMatch": "StatusDisk",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "0",
                                "representation": "success",
                                "text": "{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "1",
                                "representation": "2",
                                "text": "{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "2",
                                "representation": "4",
                                "text": "{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "AvgDisk",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 38,
                            "options": {
                              "style": "decimal",
                              "maximumFractionDigits": 2
                            }
                          }
                        },
                        {
                          "columnMatch": "LastDisk",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 4,
                            "options": {
                              "style": "decimal",
                              "maximumFractionDigits": 2
                            }
                          }
                        },
                        {
                          "columnMatch": "Trend",
                          "formatter": 10,
                          "formatOptions": {
                            "palette": "blue"
                          }
                        },
                        {
                          "columnMatch": "Max",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        },
                        {
                          "columnMatch": "Average",
                          "formatter": 8,
                          "formatOptions": {
                            "palette": "yellowOrangeRed"
                          },
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false
                            }
                          }
                        },
                        {
                          "columnMatch": "Min",
                          "formatter": 8,
                          "formatOptions": {
                            "palette": "yellowOrangeRed",
                            "aggregation": "Min"
                          },
                          "numberFormat": {
                            "unit": 0,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        }
                      ],
                      "sortBy": [
                        {
                          "itemKey": "$gen_number_AvgCPU_2",
                          "sortOrder": 2
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "StatusCPU",
                          "label": "CPU"
                        },
                        {
                          "columnId": "AvgCPU",
                          "label": "CPU (avg)"
                        },
                        {
                          "columnId": "MaxCPU",
                          "label": "CPU (max)"
                        },
                        {
                          "columnId": "StatusMEM",
                          "label": "Memory"
                        },
                        {
                          "columnId": "AvgMEM",
                          "label": "Memory (avg)"
                        },
                        {
                          "columnId": "MaxMEM",
                          "label": "Memory (max)"
                        },
                        {
                          "columnId": "StatusDisk",
                          "label": "Disk"
                        },
                        {
                          "columnId": "AvgDisk",
                          "label": "Disk (avg)"
                        },
                        {
                          "columnId": "LastDisk",
                          "label": "Disk (last)"
                        }
                      ]
                    },
                    "sortBy": [
                      {
                        "itemKey": "$gen_number_AvgCPU_2",
                        "sortOrder": 2
                      }
                    ]
                  },
                  "showPin": true,
                  "name": "query - 2",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 1,
                  "content": {
                    "json": "# Top Performance"
                  },
                  "name": "text - 8"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "## Processor(total)\\% Processor Time"
                  },
                  "name": "text - 10"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let TopComputers = Perf \r\n| where Computer contains \"{Computer}\" or \"{Computer}\"==\"All\"\r\n| where ObjectName contains \"Processor\" and CounterName == \"% Processor Time\" and (InstanceName==\"_Total\" or InstanceName==\"total\")\r\n| summarize AvgCPU = avg(CounterValue) by Computer \r\n| top 10 by AvgCPU desc\r\n| project Computer; \r\nPerf \r\n| where Computer in (TopComputers) \r\n| where ObjectName contains \"Processor\" and CounterName == \"% Processor Time\" and (InstanceName==\"_Total\" or InstanceName==\"total\") \r\n| summarize Used_CPU = round(avg(CounterValue),1) by Computer, bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100)\r\n| render timechart",
                    "size": 0,
                    "aggregation": 3,
                    "showAnalytics": true,
                    "title": "% Processor Time - Top 10 Computers",
                    "timeContextFromParameter": "TimeRange",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "chartSettings": {
                      "showLegend": true,
                      "ySettings": {
                        "numberFormatSettings": {
                          "unit": 1,
                          "options": {
                            "style": "decimal",
                            "useGrouping": true
                          }
                        }
                      }
                    }
                  },
                  "customWidth": "50",
                  "name": "query - 4",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let trend = \r\nPerf           \r\n| where Computer contains \"{Computer}\" or \"{Computer}\"==\"All\"\r\n| where ObjectName contains \"Processor\" and CounterName == \"% Processor Time\" and (InstanceName==\"_Total\" or InstanceName==\"total\") \r\n| make-series Average = round(avg(CounterValue), 3) default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step totimespan(\"00:30:00\") by Computer     \r\n| project Computer, [\"Trend\"] = Average; \r\n\r\nPerf\r\n| where Computer contains \"{Computer}\" or \"{Computer}\"==\"All\"\r\n| where ObjectName contains \"Processor\" and CounterName == \"% Processor Time\" and (InstanceName==\"_Total\" or InstanceName==\"total\")\r\n| summarize Average=round(avg(CounterValue),3) by Computer\r\n| join (trend) on Computer\r\n| extend Status = case (\r\n                  Average > 80, \"Critical\",\r\n                  Average > 50, \"Warning\",\r\n                  Average <= 50, \"Healthy\", \"Unknown\"\r\n)\r\n\r\n| project Status, Computer, Average, Trend\r\n| sort by Average ",
                    "size": 0,
                    "showAnalytics": true,
                    "title": "Thresholds (Warning>50; Critical>80) - All Computers",
                    "timeContextFromParameter": "TimeRange",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Healthy",
                                "representation": "success",
                                "text": "{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Warning",
                                "representation": "2",
                                "text": "{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Critical",
                                "representation": "critical",
                                "text": "{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Average",
                          "formatter": 8,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "greenRed"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        },
                        {
                          "columnMatch": "Trend",
                          "formatter": 21,
                          "formatOptions": {
                            "palette": "green"
                          }
                        }
                      ]
                    },
                    "sortBy": []
                  },
                  "customWidth": "50",
                  "name": "query - 9",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let TopComputers = Perf \r\n| where Computer contains \"{Computer}\" or \"{Computer}\"==\"All\"\r\n| where ObjectName == \"Memory\" and (CounterName == \"Available MBytes\" or CounterName == \"Available MBytes Memory\" )\r\n| summarize AvailableGBytes = round(avg(CounterValue)/1024,2) by Computer\r\n| top 10 by AvailableGBytes asc\r\n| project Computer; \r\nPerf \r\n| where Computer in (TopComputers) \r\n| where ObjectName == \"Memory\" and (CounterName == \"Available MBytes\" or CounterName == \"Available MBytes Memory\" )\r\n| summarize AvailableGBytes = round(avg(CounterValue)/1024,2) by Computer, bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100)\r\n| render timechart",
                    "size": 0,
                    "aggregation": 3,
                    "showAnalytics": true,
                    "title": "Available MBytes - Top 10 Computers",
                    "timeContextFromParameter": "TimeRange",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "visualization": "timechart",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "AvailableMBytes",
                          "formatter": 0,
                          "formatOptions": {
                            "showIcon": true
                          },
                          "numberFormat": {
                            "unit": 4,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false
                            }
                          }
                        }
                      ]
                    },
                    "chartSettings": {
                      "createOtherGroup": 0,
                      "showLegend": true,
                      "ySettings": {
                        "unit": 5,
                        "min": null,
                        "max": null
                      }
                    }
                  },
                  "customWidth": "50",
                  "name": "query - 5",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let trend = \r\nPerf           \r\n| where Computer contains \"{Computer}\" or \"{Computer}\"==\"All\"\r\n| where ObjectName == \"Memory\" and (CounterName == \"Available MBytes\" or CounterName == \"Available MBytes Memory\" )\r\n| make-series Average = round(avg(CounterValue), 3) default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step totimespan(\"00:30:00\") by Computer     \r\n| project Computer, [\"Trend\"] = Average; \r\n\r\nPerf\r\n| where Computer contains \"{Computer}\" or \"{Computer}\"==\"All\"\r\n| where ObjectName == \"Memory\" and (CounterName == \"Available MBytes\" or CounterName == \"Available MBytes Memory\" )\r\n| summarize [\"Available GBytes\"]=round(avg(CounterValue)/1024,2) by Computer\r\n| join (trend) on Computer\r\n| extend Status = case (\r\n                  [\"Available GBytes\"] > 4, \"Healthy\",\r\n                  [\"Available GBytes\"] >= 1, \"Warning\",\r\n                  [\"Available GBytes\"] < 1, \"Critical\", \"Unknown\"\r\n)\r\n| project Status, Computer, [\"Available GBytes\"], Trend\r\n| sort by [\"Available GBytes\"] asc",
                    "size": 0,
                    "showAnalytics": true,
                    "title": "Thresholds (Warning < 4 GB; Critical < 1 GB) - All Computers",
                    "timeContextFromParameter": "TimeRange",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Healthy",
                                "representation": "success",
                                "text": "{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Warning",
                                "representation": "2",
                                "text": "{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Critical",
                                "representation": "critical",
                                "text": "{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "Unknown",
                                "text": "{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Available GBytes",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 5,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        },
                        {
                          "columnMatch": "Trend",
                          "formatter": 21,
                          "formatOptions": {
                            "palette": "green"
                          }
                        },
                        {
                          "columnMatch": "Average",
                          "formatter": 8,
                          "formatOptions": {
                            "palette": "blue"
                          },
                          "numberFormat": {
                            "unit": 5,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "Available GBytes",
                          "label": "Average"
                        }
                      ]
                    },
                    "sortBy": []
                  },
                  "customWidth": "50",
                  "name": "query - 9 - Copy",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let TopComputers = Perf \r\n| where Computer contains \"{Computer}\" or \"{Computer}\"==\"All\"\r\n| where ObjectName == \"Memory\" and (CounterName == \"% Committed Bytes In Use\"  or CounterName == \"% Used Memory\")\r\n| summarize PctCommittedBytes = round(avg(CounterValue),2) by Computer\r\n| top 10 by PctCommittedBytes desc\r\n| project Computer; \r\nPerf \r\n| where Computer in (TopComputers) \r\n| where ObjectName == \"Memory\" and (CounterName == \"% Committed Bytes In Use\"  or CounterName == \"% Used Memory\")\r\n| summarize PctCommittedBytes = round(avg(CounterValue),2) by Computer, bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100)\r\n| render timechart",
                    "size": 0,
                    "aggregation": 3,
                    "showAnalytics": true,
                    "title": "% Committed Bytes In Use - Top 10 Computers",
                    "timeContextFromParameter": "TimeRange",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "chartSettings": {
                      "group": "Computer",
                      "createOtherGroup": 0,
                      "showLegend": true,
                      "ySettings": {
                        "unit": 1,
                        "min": 0,
                        "max": 100
                      }
                    }
                  },
                  "customWidth": "50",
                  "name": "query - 9",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let trend = \r\nPerf           \r\n| where Computer contains \"{Computer}\" or \"{Computer}\"==\"All\"\r\n| where ObjectName == \"Memory\" and (CounterName == \"% Committed Bytes In Use\" or CounterName==\"% Used Memory\")\r\n| make-series Average = round(avg(CounterValue), 3) default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step totimespan(\"00:30:00\") by Computer     \r\n| project Computer, [\"Trend\"] = Average; \r\n\r\nPerf\r\n| where Computer contains \"{Computer}\" or \"{Computer}\"==\"All\"\r\n| where ObjectName == \"Memory\" and (CounterName == \"% Committed Bytes In Use\" or CounterName==\"% Used Memory\") \r\n| summarize Average=round(avg(CounterValue),3) by Computer\r\n| join (trend) on Computer\r\n| extend Status = case (\r\n                  Average > 90, \"Critical\",\r\n                  Average > 60, \"Warning\",\r\n                  Average <= 60, \"Healthy\", \"Unknown\"\r\n)\r\n\r\n| project Status, Computer, Average, Trend\r\n| sort by Average ",
                    "size": 0,
                    "showAnalytics": true,
                    "title": "Thresholds (Warning>60; Critical>90) - All Computers",
                    "timeContextFromParameter": "TimeRange",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Healthy",
                                "representation": "success",
                                "text": "{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Warning",
                                "representation": "2",
                                "text": "{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Critical",
                                "representation": "critical",
                                "text": "{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Average",
                          "formatter": 8,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "greenRed"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal"
                            }
                          }
                        },
                        {
                          "columnMatch": "Trend",
                          "formatter": 21,
                          "formatOptions": {
                            "palette": "green"
                          }
                        }
                      ],
                      "sortBy": [
                        {
                          "itemKey": "$gen_heatmap_Average_2",
                          "sortOrder": 2
                        }
                      ]
                    },
                    "sortBy": [
                      {
                        "itemKey": "$gen_heatmap_Average_2",
                        "sortOrder": 2
                      }
                    ]
                  },
                  "customWidth": "50",
                  "name": "query - 9 - Copy",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 1,
                  "content": {
                    "json": "## Logical Disk: _Free Megabytes_ and _Avg read/write per sec_ "
                  },
                  "name": "text - 12"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let TopDiscos = Perf \r\n| where Computer contains \"{Computer}\" or \"{Computer}\"==\"All\"\r\n| where CounterName == \"Free Megabytes\" and (ObjectName == \"LogicalDisk\" or ObjectName == \"Logical Disk\")\r\n| where (strlen(InstanceName) ==2 and InstanceName contains \":\") or (InstanceName contains \"/\")\r\n| extend Disco = strcat(InstanceName, \" - \",Computer )\r\n| summarize FreeSpace = round(avg(CounterValue),2) by Disco\r\n| top 10 by FreeSpace asc\r\n| project Disco; \r\nPerf \r\n| where CounterName == \"Free Megabytes\" and (ObjectName == \"LogicalDisk\" or ObjectName == \"Logical Disk\")\r\n| where (strlen(InstanceName) ==2 and InstanceName contains \":\") or (InstanceName contains \"/\")\r\n| extend Disco = strcat(InstanceName, \" - \",Computer)\r\n| where Disco in (TopDiscos) \r\n| summarize FreeSpace = round(avg(CounterValue),2) by Disco, bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100)\r\n\r\n\r\n",
                    "size": 0,
                    "aggregation": 3,
                    "showAnalytics": true,
                    "title": "Free Megabytes - Top 10 Computers-Volumes",
                    "timeContextFromParameter": "TimeRange",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "visualization": "timechart",
                    "chartSettings": {
                      "showLegend": true,
                      "ySettings": {
                        "numberFormatSettings": {
                          "unit": 4,
                          "options": {
                            "style": "decimal",
                            "useGrouping": true
                          }
                        }
                      }
                    }
                  },
                  "customWidth": "50",
                  "name": "query - 6",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let trend = \r\nPerf           \r\n| where Computer contains \"{Computer}\" or \"{Computer}\"==\"All\"\r\n| where CounterName == \"Free Megabytes\" and (ObjectName == \"LogicalDisk\" or ObjectName == \"Logical Disk\")\r\n| where (strlen(InstanceName) ==2 and InstanceName contains \":\") or (InstanceName contains \"/\")\r\n| extend Disco = strcat(InstanceName, \" - \",Computer )\r\n| make-series Average = round(avg(CounterValue), 3) default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step totimespan(\"00:30:00\") by Disco     \r\n| project Disco, [\"Trend\"] = Average; \r\n\r\nPerf\r\n| where Computer contains \"{Computer}\" or \"{Computer}\"==\"All\"\r\n| where CounterName == \"Free Megabytes\" and (ObjectName == \"LogicalDisk\" or ObjectName == \"Logical Disk\")\r\n| where (strlen(InstanceName) ==2 and InstanceName contains \":\") or (InstanceName contains \"/\")\r\n| extend Disco = strcat(InstanceName, \" - \",Computer )\r\n| summarize Average=round(avg(CounterValue),2) by Disco,Computer,InstanceName\r\n| join (trend) on Disco\r\n| extend Status = case (\r\n                  Average <5000, \"Critical\",\r\n                  Average < 30000, \"Warning\",\r\n                  Average >= 30000, \"Healthy\", \"Unknown\"\r\n)\r\n\r\n| project Status, Computer,Disk=InstanceName, Average, Trend\r\n| sort by Average asc ",
                    "size": 0,
                    "showAnalytics": true,
                    "title": "Thresholds (Warning < 30GB; Critical < 5GB) - All Computers-Volumes",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Healthy",
                                "representation": "success",
                                "text": "{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Warning",
                                "representation": "2",
                                "text": "{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Critical",
                                "representation": "critical",
                                "text": "{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Average",
                          "formatter": 0,
                          "numberFormat": {
                            "unit": 4,
                            "options": {
                              "style": "decimal",
                              "useGrouping": false,
                              "minimumFractionDigits": 2,
                              "maximumFractionDigits": 2
                            }
                          }
                        },
                        {
                          "columnMatch": "Trend",
                          "formatter": 21,
                          "formatOptions": {
                            "palette": "green"
                          }
                        }
                      ]
                    },
                    "sortBy": []
                  },
                  "customWidth": "50",
                  "name": "query - 9 - Copy - Copy",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let TopDiscos = Perf \r\n| where Computer contains \"{Computer}\" or \"{Computer}\"==\"All\"\r\n| where CounterName == \"Disk Reads/sec\" and (ObjectName == \"LogicalDisk\" or ObjectName == \"Logical Disk\")\r\n| where (strlen(InstanceName) ==2 and InstanceName contains \":\") or ( InstanceName == \"/\")\r\n| extend Disco = strcat(InstanceName, \" - \",Computer )\r\n| summarize AVGReads = avg(CounterValue) by Disco\r\n| top 10 by AVGReads desc\r\n| project Disco; \r\nPerf \r\n| where CounterName == \"Disk Reads/sec\" and (ObjectName == \"LogicalDisk\" or ObjectName == \"Logical Disk\")\r\n| where (strlen(InstanceName) ==2 and InstanceName contains \":\") or ( InstanceName == \"/\")\r\n| extend Disco = strcat(InstanceName, \" - \",Computer )\r\n| where Disco in (TopDiscos) \r\n| summarize AVGReads = avg(CounterValue) by Disco, bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100)\r\n| render timechart\r\n\r\n\r\n",
                    "size": 0,
                    "aggregation": 3,
                    "showAnalytics": true,
                    "title": "Disk Reads/sec - Top 10 Computers-Volumes",
                    "timeContextFromParameter": "TimeRange",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "visualization": "timechart",
                    "chartSettings": {
                      "group": "Disco",
                      "createOtherGroup": 22,
                      "showLegend": true
                    }
                  },
                  "customWidth": "50",
                  "name": "query - 6 - Copy",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let trend = \r\nPerf           \r\n| where Computer contains \"{Computer}\" or \"{Computer}\"==\"All\"\r\n| where (ObjectName == \"LogicalDisk\" or ObjectName==\"Logical Disk\") and CounterName == \"Disk Reads/sec\" and ((strlen(InstanceName) == 2 and InstanceName contains \":\") or (InstanceName == \"/\"))\r\n| extend Disco = strcat(InstanceName, \" - \",Computer)\r\n| make-series AVGReads = round(avg(CounterValue),2) default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step totimespan(\"00:30:00\") by Disco     \r\n| project Disco, [\"Trend\"] = AVGReads; \r\n\r\nPerf\r\n| where Computer contains \"{Computer}\" or \"{Computer}\"==\"All\"\r\n| where (ObjectName == \"LogicalDisk\" or ObjectName==\"Logical Disk\") and CounterName == \"Disk Reads/sec\" and ((strlen(InstanceName) == 2 and InstanceName contains \":\") or (InstanceName == \"/\"))\r\n| extend Disco = strcat(InstanceName, \" - \",Computer )\r\n| summarize AVGReads=round(avg(CounterValue),2) by Disco,Computer,InstanceName\r\n| join (trend) on Disco\r\n| extend Status = case (\r\n                  AVGReads > 25, \"Critical\",\r\n                  AVGReads > 15, \"Warning\",\r\n                  AVGReads <= 15, \"Healthy\", \"Unknown\"\r\n)\r\n| project  Status, Computer,Disk=InstanceName, [\"Reads\"]=AVGReads, Trend\r\n| sort by [\"Reads\"] desc ",
                    "size": 0,
                    "showAnalytics": true,
                    "title": "Thresholds (Warning > 15Reads/sec; Critical > 25Reads/sec) - All Computers-Volumes",
                    "timeContextFromParameter": "TimeRange",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Healthy",
                                "representation": "success",
                                "text": "{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Warning",
                                "representation": "2",
                                "text": "{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Critical",
                                "representation": "critical",
                                "text": "{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Trend",
                          "formatter": 21,
                          "formatOptions": {
                            "palette": "green"
                          }
                        },
                        {
                          "columnMatch": "Average",
                          "formatter": 8,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "blue"
                          }
                        }
                      ],
                      "sortBy": [
                        {
                          "itemKey": "Reads",
                          "sortOrder": 2
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "Reads",
                          "label": "Average"
                        }
                      ]
                    },
                    "sortBy": [
                      {
                        "itemKey": "Reads",
                        "sortOrder": 2
                      }
                    ]
                  },
                  "customWidth": "50",
                  "name": "query - 9 - Copy - Copy - Copy",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let TopDiscos= Perf \r\n| where Computer contains \"{Computer}\" or \"{Computer}\"==\"All\"\r\n| where CounterName == \"Disk Writes/sec\" and (ObjectName == \"LogicalDisk\" or ObjectName==\"Logical Disk\")\r\n| where (strlen(InstanceName) ==2 and InstanceName contains \":\") or InstanceName==\"/\"\r\n| extend Disco = strcat(InstanceName, \" - \",Computer )\r\n| summarize AVGWrites = avg(CounterValue) by Disco\r\n| top 10 by AVGWrites desc\r\n| project Disco; \r\nPerf \r\n| where CounterName == \"Disk Writes/sec\" and (ObjectName == \"LogicalDisk\" or ObjectName==\"Logical Disk\")\r\n| where (strlen(InstanceName) ==2 and InstanceName contains \":\") or InstanceName==\"/\"\r\n| extend Disco = strcat(InstanceName, \" - \",Computer )\r\n| where Disco in (TopDiscos) \r\n| summarize AVGWrites = avg(CounterValue) by Disco, bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100)\r\n| render timechart\r\n\r\n\r\n",
                    "size": 0,
                    "showAnalytics": true,
                    "title": "Disk Writes/sec - Top 10 Computers-Volumes",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "visualization": "timechart",
                    "chartSettings": {
                      "group": "Disco",
                      "createOtherGroup": 22,
                      "showLegend": true
                    }
                  },
                  "customWidth": "50",
                  "name": "query - 6 - Copy - Copy",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let trend = \r\nPerf           \r\n| where Computer contains \"{Computer}\"  or \"{Computer}\"==\"All\"\r\n| where CounterName == \"Disk Writes/sec\" and (ObjectName == \"LogicalDisk\" or ObjectName==\"Logical Disk\")\r\n| where (strlen(InstanceName) ==2 and InstanceName contains \":\") or InstanceName==\"/\"\r\n| extend Disco = strcat(InstanceName, \" - \",Computer )\r\n| make-series AVGWrites = round(avg(CounterValue),2) default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step totimespan(\"00:30:00\") by Disco     \r\n| project Disco, [\"Trend\"] = AVGWrites; \r\n\r\nPerf\r\n| where Computer contains \"{Computer}\" or \"{Computer}\"==\"All\"\r\n| where CounterName == \"Disk Writes/sec\" and (ObjectName == \"LogicalDisk\" or ObjectName==\"Logical Disk\")\r\n| where (strlen(InstanceName) ==2 and InstanceName contains \":\") or InstanceName==\"/\"\r\n| extend Disco = strcat(InstanceName, \" - \",Computer )\r\n| summarize AVGWrites=round(avg(CounterValue),2) by Disco,Computer,InstanceName\r\n| join (trend) on Disco\r\n| extend Status = case (\r\n                  AVGWrites > 25, \"Critical\",\r\n                  AVGWrites > 15, \"Warning\",\r\n                  AVGWrites <= 15, \"Healthy\", \"Unknown\"\r\n)\r\n\r\n| project  Status, Computer,Disk=InstanceName, [\"Writes\"]=AVGWrites, Trend\r\n| sort by [\"Writes\"] desc ",
                    "size": 0,
                    "showAnalytics": true,
                    "title": "Thresholds (Warning > 15Writes/sec; Critical > 25Writes/sec) - All Computers-Volumes",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "crossComponentResources": [
                      "{Workspace}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Status",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Healthy",
                                "representation": "success",
                                "text": "{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Warning",
                                "representation": "2",
                                "text": "{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Critical",
                                "representation": "critical",
                                "text": "{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "Trend",
                          "formatter": 21,
                          "formatOptions": {
                            "palette": "green"
                          }
                        },
                        {
                          "columnMatch": "Average",
                          "formatter": 8,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "blue"
                          }
                        }
                      ],
                      "sortBy": [
                        {
                          "itemKey": "Writes",
                          "sortOrder": 2
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "Writes",
                          "label": "Average"
                        }
                      ]
                    },
                    "sortBy": [
                      {
                        "itemKey": "Writes",
                        "sortOrder": 2
                      }
                    ]
                  },
                  "customWidth": "50",
                  "name": "query - 9 - Copy - Copy - Copy - Copy",
                  "styleSettings": {
                    "showBorder": true
                  }
                }
              ],
              "isLocked": false,
              "fallbackResourceIds": [
                "azure monitor"
              ]
            },
            "alertsConsoleWorkbookContent": {
              "version": "Notebook/1.0",
              "items": [
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "crossComponentResources": [
                      "{Subscription}"
                    ],
                    "parameters": [
                      {
                        "id": "1f74ed9a-e3ed-498d-bd5b-f68f3836a117",
                        "version": "KqlParameterItem/1.0",
                        "name": "Subscription",
                        "label": "Subscriptions",
                        "type": 6,
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "value": [
                          "[subscription().id]"
                        ],
                        "typeSettings": {
                          "additionalResourceOptions": [
                            "value::all"
                          ],
                          "includeAll": false,
                          "showDefault": false
                        }
                      },
                      {
                        "id": "b616a3a3-4271-4208-b1a9-a92a78efed08",
                        "version": "KqlParameterItem/1.0",
                        "name": "ResourceGroups",
                        "label": "Resource groups",
                        "type": 2,
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "Resources\r\n| summarize by resourceGroup\r\n| order by resourceGroup asc\r\n| project id=resourceGroup, resourceGroup",
                        "crossComponentResources": [
                          "{Subscription}"
                        ],
                        "value": [
                          "value::all"
                        ],
                        "typeSettings": {
                          "additionalResourceOptions": [
                            "value::all"
                          ],
                          "selectAllValue": "*"
                        },
                        "queryType": 1,
                        "resourceType": "microsoft.resourcegraph/resources"
                      },
                      {
                        "id": "0e85e0e4-a7e8-4ea8-b291-e444c317843a",
                        "version": "KqlParameterItem/1.0",
                        "name": "ResourceTypes",
                        "label": "Resource types",
                        "type": 7,
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "where \"*\" in ({ResourceGroups}) or resourceGroup in ({ResourceGroups})\r\n| summarize by type\r\n| project type, label=type\r\n",
                        "crossComponentResources": [
                          "{Subscription}"
                        ],
                        "value": [
                          "value::all"
                        ],
                        "typeSettings": {
                          "additionalResourceOptions": [
                            "value::all"
                          ],
                          "selectAllValue": "*"
                        },
                        "queryType": 1,
                        "resourceType": "microsoft.resourcegraph/resources"
                      },
                      {
                        "id": "f60ea0a0-3703-44ca-a59b-df0246423f41",
                        "version": "KqlParameterItem/1.0",
                        "name": "Resources",
                        "type": 5,
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "query": "Resources\r\n| where \"*\" in ({ResourceTypes}) or type in~({ResourceTypes})\r\n| where '*' in~({ResourceGroups}) or resourceGroup in~({ResourceGroups}) \r\n| order by name asc\r\n| extend Rank = row_number()\r\n| project value = id, label = name, selected = Rank <= 10, group = resourceGroup",
                        "crossComponentResources": [
                          "{Subscription}"
                        ],
                        "value": [
                          "value::all"
                        ],
                        "typeSettings": {
                          "additionalResourceOptions": [
                            "value::all"
                          ],
                          "selectAllValue": "*",
                          "defaultItemsText": "First 10"
                        },
                        "queryType": 1,
                        "resourceType": "microsoft.resourcegraph/resources"
                      },
                      {
                        "id": "015d1a5e-357f-4e01-ac77-598e7b493db0",
                        "version": "KqlParameterItem/1.0",
                        "name": "timeRange",
                        "label": "Time Range",
                        "type": 4,
                        "isRequired": true,
                        "value": {
                          "durationMs": 2592000000
                        },
                        "typeSettings": {
                          "selectableValues": [
                            {
                              "durationMs": 300000
                            },
                            {
                              "durationMs": 900000
                            },
                            {
                              "durationMs": 1800000
                            },
                            {
                              "durationMs": 3600000
                            },
                            {
                              "durationMs": 14400000
                            },
                            {
                              "durationMs": 43200000
                            },
                            {
                              "durationMs": 86400000
                            },
                            {
                              "durationMs": 172800000
                            },
                            {
                              "durationMs": 259200000
                            },
                            {
                              "durationMs": 604800000
                            },
                            {
                              "durationMs": 1209600000
                            },
                            {
                              "durationMs": 2419200000
                            },
                            {
                              "durationMs": 2592000000
                            }
                          ],
                          "allowCustom": true
                        }
                      },
                      {
                        "id": "bd6d6075-dc8f-43d3-829f-7e2245a3eb21",
                        "version": "KqlParameterItem/1.0",
                        "name": "State",
                        "type": 2,
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "jsonData": "{\"version\":\"1.0.0\",\"content\":\"[ \r\n    {\"id\":\"New\", \"label\": \"New\"},\r\n    {\"id\":\"Acknowledged\", \"label\": \"Acknowledged\"},\r\n    {\"id\":\"Closed\", \"label\": \"Closed\"}\r\n]\",\"transformers\":null}",
                        "crossComponentResources": [
                          "{Subscription}"
                        ],
                        "value": [
                          "value::all"
                        ],
                        "typeSettings": {
                          "additionalResourceOptions": [
                            "value::all"
                          ],
                          "selectAllValue": "*",
                          "showDefault": false
                        },
                        "queryType": 8
                      }
                    ],
                    "style": "above",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources"
                  },
                  "name": "parameters"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "AlertsManagementResources \r\n| where type =~ 'microsoft.alertsmanagement/alerts'\r\n| where properties.essentials.startDateTime {timeRange}  \r\n| where properties.essentials.actionStatus.isSuppressed == false\r\n| extend Severity=tostring(properties.essentials.severity)\r\n| extend State=tostring(properties.essentials.alertState)\r\n| extend comp = properties.context.context.condition.allOf[0].dimensions\r\n| mvexpand comp\r\n| where comp.name == 'Computer'\r\n| where \"*\" in ({State}) or State in ({State})\r\n| where \"*\" in ({ResourceTypes}) or properties.essentials.targetResourceType in~ ({ResourceTypes})\r\n| where \"*\" in ({ResourceGroups}) or properties.essentials.targetResourceGroup in~ ({ResourceGroups})\r\n| where \"*\" in ({Resources}) or properties.essentials.targetResource in~ ({Resources})\r\n| project AlertId=id, StartTime=todatetime(tostring(properties.essentials.startDateTime)), Name=name, Severity, State=tostring(properties.essentials.alertState), MonitorCondition=tostring(properties.essentials.monitorCondition), SignalType=tostring(properties.essentials.signalType), TargetResource = split(comp.value, '.')[0]\r\n| order by StartTime desc\r\n",
                    "size": 0,
                    "title": "Azure Monitor alerts",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscription}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "AlertId",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "StartTime",
                          "formatter": 6
                        },
                        {
                          "columnMatch": "Name",
                          "formatter": 1,
                          "formatOptions": {
                            "linkTarget": "OpenBlade",
                            "linkIsContextBlade": true,
                            "bladeOpenContext": {
                              "bladeName": "AlertDetailsTemplateBlade",
                              "extensionName": "Microsoft_Azure_Monitoring",
                              "bladeParameters": [
                                {
                                  "name": "alertId",
                                  "source": "column",
                                  "value": "AlertId"
                                },
                                {
                                  "name": "alertName",
                                  "source": "column",
                                  "value": "Name"
                                },
                                {
                                  "name": "invokedFrom",
                                  "source": "static",
                                  "value": "Workbooks"
                                }
                              ]
                            }
                          },
                          "tooltipFormat": {
                            "tooltip": "View alert details"
                          }
                        },
                        {
                          "columnMatch": "Severity",
                          "formatter": 11
                        },
                        {
                          "columnMatch": "State",
                          "formatter": 1
                        },
                        {
                          "columnMatch": "MonitorCondition",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Fired",
                                "representation": "Fired",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Resolved",
                                "representation": "Resolved",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "success",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "TargetResource",
                          "formatter": 13,
                          "formatOptions": {
                            "linkTarget": null,
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "ResourceType",
                          "formatter": 16,
                          "formatOptions": {
                            "showIcon": true
                          }
                        },
                        {
                          "columnMatch": "Resource Type",
                          "formatter": 11
                        },
                        {
                          "columnMatch": "essentials",
                          "formatter": 5
                        }
                      ]
                    }
                  },
                  "showPin": true,
                  "name": "query - 3"
                }
              ],
              "isLocked": false,
              "fallbackResourceIds": [
                "azure monitor"
              ]
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/actionGroups",
              "apiVersion": "2022-06-01",
              "name": "[variables('actionGroupName')]",
              "location": "Global",
              "properties": {
                "groupShortName": "agarcservers",
                "enabled": true,
                "emailReceivers": [
                  {
                    "name": "ArcServersEmail",
                    "emailAddress": "[parameters('emailAddress')]"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Insights/scheduledQueryRules",
              "apiVersion": "2021-02-01-preview",
              "name": "Processor Time Percent",
              "location": "[parameters('location')]",
              "tags": {
                "[format('{0}', format('{0}{1}', variables('convertRuleTag'), parameters('workspaceId')))]": "Resource"
              },
              "kind": "LogToMetric",
              "properties": {
                "displayName": "Processor Time Percent",
                "description": "Monitor Alert for Processor Time Percent",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "criteria": {
                  "allOf": [
                    {
                      "metricName": "Average_% Processor Time",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        },
                        {
                          "name": "ObjectName",
                          "operator": "Include",
                          "values": [
                            "Processor"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "Processor Time Percent",
              "location": "global",
              "tags": {},
              "properties": {
                "severity": "[variables('alertsSeverity')]",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "description": "Monitor Alert for Processor Time Percent",
                "evaluationFrequency": "[variables('evaluationFrequency')]",
                "windowSize": "[variables('windowSize')]",
                "criteria": {
                  "allOf": [
                    {
                      "threshold": 80,
                      "name": "Metric1",
                      "metricNamespace": "Microsoft.OperationalInsights/workspaces",
                      "metricName": "Average_% Processor Time",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        },
                        {
                          "name": "ObjectName",
                          "operator": "Include",
                          "values": [
                            "Processor"
                          ]
                        }
                      ],
                      "operator": "GreaterThan",
                      "timeAggregation": "Average",
                      "criterionType": "StaticThresholdCriterion"
                    }
                  ],
                  "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": true,
                "targetResourceType": "Microsoft.OperationalInsights/workspaces",
                "targetResourceRegion": "[parameters('location')]",
                "actions": [
                  {
                    "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]",
                "[resourceId('Microsoft.Insights/scheduledQueryRules', 'Processor Time Percent')]"
              ]
            },
            {
              "type": "Microsoft.Insights/scheduledQueryRules",
              "apiVersion": "2021-02-01-preview",
              "name": "Memory Available MBytes",
              "location": "[parameters('location')]",
              "tags": {
                "[format('{0}', format('{0}{1}', variables('convertRuleTag'), parameters('workspaceId')))]": "Resource"
              },
              "kind": "LogToMetric",
              "properties": {
                "displayName": "Memory Available MBytes",
                "description": "Monitor alert for Memory Available MBytes",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "criteria": {
                  "allOf": [
                    {
                      "metricName": "Average_Available MBytes",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        },
                        {
                          "name": "ObjectName",
                          "operator": "Include",
                          "values": [
                            "Memory"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "Memory Available MBytes",
              "location": "global",
              "tags": {},
              "properties": {
                "severity": "[variables('alertsSeverity')]",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "description": "Monitor alert for Memory Available MBytes",
                "evaluationFrequency": "[variables('evaluationFrequency')]",
                "windowSize": "[variables('windowSize')]",
                "criteria": {
                  "allOf": [
                    {
                      "threshold": 1500,
                      "name": "Metric1",
                      "metricNamespace": "Microsoft.OperationalInsights/workspaces",
                      "metricName": "Average_Available MBytes",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        },
                        {
                          "name": "ObjectName",
                          "operator": "Include",
                          "values": [
                            "Memory"
                          ]
                        }
                      ],
                      "operator": "LessThan",
                      "timeAggregation": "Average",
                      "criterionType": "StaticThresholdCriterion"
                    }
                  ],
                  "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": true,
                "targetResourceType": "Microsoft.OperationalInsights/workspaces",
                "targetResourceRegion": "[parameters('location')]",
                "actions": [
                  {
                    "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]",
                "[resourceId('Microsoft.Insights/scheduledQueryRules', 'Memory Available MBytes')]"
              ]
            },
            {
              "type": "Microsoft.Insights/scheduledQueryRules",
              "apiVersion": "2021-02-01-preview",
              "name": "Memory Commited Bytes in use Percent",
              "location": "[parameters('location')]",
              "tags": {
                "[format('{0}', format('{0}{1}', variables('convertRuleTag'), parameters('workspaceId')))]": "Resource"
              },
              "kind": "LogToMetric",
              "properties": {
                "displayName": "Memory Commited Bytes in use Percent",
                "description": "Monitor Alert for Memory Commited Bytes in use Percent",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "criteria": {
                  "allOf": [
                    {
                      "metricName": "Average_% Committed Bytes In Use",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        },
                        {
                          "name": "ObjectName",
                          "operator": "Include",
                          "values": [
                            "Memory"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "Memory Commited Bytes in use Percent",
              "location": "global",
              "tags": {},
              "properties": {
                "severity": "[variables('alertsSeverity')]",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "description": "Monitor Alert for Memory Commited Bytes in use Percent",
                "evaluationFrequency": "[variables('evaluationFrequency')]",
                "windowSize": "[variables('windowSize')]",
                "criteria": {
                  "allOf": [
                    {
                      "threshold": 80,
                      "name": "Metric1",
                      "metricNamespace": "Microsoft.OperationalInsights/workspaces",
                      "metricName": "Average_% Committed Bytes In Use",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        },
                        {
                          "name": "ObjectName",
                          "operator": "Include",
                          "values": [
                            "Memory"
                          ]
                        }
                      ],
                      "operator": "GreaterThan",
                      "timeAggregation": "Average",
                      "criterionType": "StaticThresholdCriterion"
                    }
                  ],
                  "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": true,
                "targetResourceType": "Microsoft.OperationalInsights/workspaces",
                "targetResourceRegion": "[parameters('location')]",
                "actions": [
                  {
                    "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]",
                "[resourceId('Microsoft.Insights/scheduledQueryRules', 'Memory Commited Bytes in use Percent')]"
              ]
            },
            {
              "type": "Microsoft.Insights/scheduledQueryRules",
              "apiVersion": "2021-02-01-preview",
              "name": "Memory Pages per Sec",
              "location": "[parameters('location')]",
              "tags": {
                "[format('{0}', format('{0}{1}', variables('convertRuleTag'), parameters('workspaceId')))]": "Resource"
              },
              "kind": "LogToMetric",
              "properties": {
                "displayName": "Memory Pages per Sec",
                "description": "Monitor Alert for Memory Pages per Sec",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "criteria": {
                  "allOf": [
                    {
                      "metricName": "Average_Pages/sec",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        },
                        {
                          "name": "ObjectName",
                          "operator": "Include",
                          "values": [
                            "Memory"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "Memory Pages per Sec",
              "location": "global",
              "tags": {},
              "properties": {
                "severity": "[variables('alertsSeverity')]",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "description": "Monitor Alert for Memory Pages per Sec",
                "evaluationFrequency": "[variables('evaluationFrequency')]",
                "windowSize": "[variables('windowSize')]",
                "criteria": {
                  "allOf": [
                    {
                      "threshold": 5000,
                      "name": "Metric1",
                      "metricNamespace": "Microsoft.OperationalInsights/workspaces",
                      "metricName": "Average_Pages/sec",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        },
                        {
                          "name": "ObjectName",
                          "operator": "Include",
                          "values": [
                            "Memory"
                          ]
                        }
                      ],
                      "operator": "GreaterThan",
                      "timeAggregation": "Average",
                      "criterionType": "StaticThresholdCriterion"
                    }
                  ],
                  "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": true,
                "targetResourceType": "Microsoft.OperationalInsights/workspaces",
                "targetResourceRegion": "[parameters('location')]",
                "actions": [
                  {
                    "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]",
                "[resourceId('Microsoft.Insights/scheduledQueryRules', 'Memory Pages per Sec')]"
              ]
            },
            {
              "type": "Microsoft.Insights/scheduledQueryRules",
              "apiVersion": "2021-02-01-preview",
              "name": "LogicalDisk Avg. Disk sec per Read",
              "location": "[parameters('location')]",
              "tags": {
                "[format('{0}', format('{0}{1}', variables('convertRuleTag'), parameters('workspaceId')))]": "Resource"
              },
              "kind": "LogToMetric",
              "properties": {
                "displayName": "LogicalDisk Avg. Disk sec per Read",
                "description": "Monitor Alert for LogicalDisk Avg. Disk sec per Read",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "criteria": {
                  "allOf": [
                    {
                      "metricName": "Average_Avg. Disk sec/Read",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        },
                        {
                          "name": "ObjectName",
                          "operator": "Include",
                          "values": [
                            "LogicalDisk"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "LogicalDisk Avg. Disk sec per Read",
              "location": "global",
              "tags": {},
              "properties": {
                "severity": "[variables('alertsSeverity')]",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "description": "Monitor Alert for LogicalDisk Avg. Disk sec per Read",
                "evaluationFrequency": "[variables('evaluationFrequency')]",
                "windowSize": "[variables('windowSize')]",
                "criteria": {
                  "allOf": [
                    {
                      "threshold": "[json('0.04')]",
                      "name": "Metric1",
                      "metricNamespace": "Microsoft.OperationalInsights/workspaces",
                      "metricName": "Average_Avg. Disk sec/Read",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        },
                        {
                          "name": "ObjectName",
                          "operator": "Include",
                          "values": [
                            "LogicalDisk"
                          ]
                        }
                      ],
                      "operator": "GreaterThan",
                      "timeAggregation": "Average",
                      "criterionType": "StaticThresholdCriterion"
                    }
                  ],
                  "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": true,
                "targetResourceType": "Microsoft.OperationalInsights/workspaces",
                "targetResourceRegion": "[parameters('location')]",
                "actions": [
                  {
                    "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]",
                "[resourceId('Microsoft.Insights/scheduledQueryRules', 'LogicalDisk Avg. Disk sec per Read')]"
              ]
            },
            {
              "type": "Microsoft.Insights/scheduledQueryRules",
              "apiVersion": "2021-02-01-preview",
              "name": "LogicalDisk Avg. Disk sec per Write",
              "location": "[parameters('location')]",
              "tags": {
                "[format('{0}', format('{0}{1}', variables('convertRuleTag'), parameters('workspaceId')))]": "Resource"
              },
              "kind": "LogToMetric",
              "properties": {
                "displayName": "LogicalDisk Avg. Disk sec per Write",
                "description": "Monitor Alert for LogicalDisk Avg. Disk sec per Write",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "criteria": {
                  "allOf": [
                    {
                      "metricName": "Average_Avg. Disk sec/Write",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        },
                        {
                          "name": "ObjectName",
                          "operator": "Include",
                          "values": [
                            "LogicalDisk"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "LogicalDisk Avg. Disk sec per Write",
              "location": "global",
              "tags": {},
              "properties": {
                "severity": "[variables('alertsSeverity')]",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "description": "Monitor Alert for LogicalDisk Avg. Disk sec per Write",
                "evaluationFrequency": "[variables('evaluationFrequency')]",
                "windowSize": "[variables('windowSize')]",
                "criteria": {
                  "allOf": [
                    {
                      "threshold": "[json('0.04')]",
                      "name": "Metric1",
                      "metricNamespace": "Microsoft.OperationalInsights/workspaces",
                      "metricName": "Average_Avg. Disk sec/Write",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        },
                        {
                          "name": "ObjectName",
                          "operator": "Include",
                          "values": [
                            "LogicalDisk"
                          ]
                        }
                      ],
                      "operator": "GreaterThan",
                      "timeAggregation": "Average",
                      "criterionType": "StaticThresholdCriterion"
                    }
                  ],
                  "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": true,
                "targetResourceType": "Microsoft.OperationalInsights/workspaces",
                "targetResourceRegion": "[parameters('location')]",
                "actions": [
                  {
                    "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]",
                "[resourceId('Microsoft.Insights/scheduledQueryRules', 'LogicalDisk Avg. Disk sec per Write')]"
              ]
            },
            {
              "type": "Microsoft.Insights/scheduledQueryRules",
              "apiVersion": "2021-02-01-preview",
              "name": "LogicalDisk Current Queue Length",
              "location": "[parameters('location')]",
              "tags": {
                "[format('{0}', format('{0}{1}', variables('convertRuleTag'), parameters('workspaceId')))]": "Resource"
              },
              "kind": "LogToMetric",
              "properties": {
                "displayName": "LogicalDisk Current Queue Length",
                "description": "Monitor Alert for LogicalDisk Current Queue Length",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "criteria": {
                  "allOf": [
                    {
                      "metricName": "Average_Current Disk Queue Length",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        },
                        {
                          "name": "ObjectName",
                          "operator": "Include",
                          "values": [
                            "LogicalDisk"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "LogicalDisk Current Queue Length",
              "location": "global",
              "tags": {},
              "properties": {
                "severity": "[variables('alertsSeverity')]",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "description": "Monitor Alert for LogicalDisk Current Queue Length",
                "evaluationFrequency": "[variables('evaluationFrequency')]",
                "windowSize": "[variables('windowSize')]",
                "criteria": {
                  "allOf": [
                    {
                      "threshold": 2,
                      "name": "Metric1",
                      "metricNamespace": "Microsoft.OperationalInsights/workspaces",
                      "metricName": "Average_Current Disk Queue Length",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        },
                        {
                          "name": "ObjectName",
                          "operator": "Include",
                          "values": [
                            "LogicalDisk"
                          ]
                        }
                      ],
                      "operator": "GreaterThan",
                      "timeAggregation": "Total",
                      "criterionType": "StaticThresholdCriterion"
                    }
                  ],
                  "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": true,
                "targetResourceType": "Microsoft.OperationalInsights/workspaces",
                "targetResourceRegion": "[parameters('location')]",
                "actions": [
                  {
                    "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]",
                "[resourceId('Microsoft.Insights/scheduledQueryRules', 'LogicalDisk Current Queue Length')]"
              ]
            },
            {
              "type": "Microsoft.Insights/scheduledQueryRules",
              "apiVersion": "2021-02-01-preview",
              "name": "LogicalDisk Free Space Percent",
              "location": "[parameters('location')]",
              "tags": {
                "[format('{0}', format('{0}{1}', variables('convertRuleTag'), parameters('workspaceId')))]": "Resource"
              },
              "kind": "LogToMetric",
              "properties": {
                "displayName": "LogicalDisk Free Space Percent",
                "description": "Monitor Alert for LogicalDisk Free Space Percent",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "criteria": {
                  "allOf": [
                    {
                      "metricName": "Average_% Free Space",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        },
                        {
                          "name": "ObjectName",
                          "operator": "Include",
                          "values": [
                            "LogicalDisk"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "LogicalDisk Free Space Percent",
              "location": "global",
              "tags": {},
              "properties": {
                "severity": "[variables('alertsSeverity')]",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "description": "Monitor Alert for LogicalDisk Free Space Percent",
                "evaluationFrequency": "[variables('evaluationFrequency')]",
                "windowSize": "[variables('windowSize')]",
                "criteria": {
                  "allOf": [
                    {
                      "threshold": 10,
                      "name": "Metric1",
                      "metricNamespace": "Microsoft.OperationalInsights/workspaces",
                      "metricName": "Average_% Free Space",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        },
                        {
                          "name": "ObjectName",
                          "operator": "Include",
                          "values": [
                            "LogicalDisk"
                          ]
                        }
                      ],
                      "operator": "LessThan",
                      "timeAggregation": "Average",
                      "criterionType": "StaticThresholdCriterion"
                    }
                  ],
                  "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": true,
                "targetResourceType": "Microsoft.OperationalInsights/workspaces",
                "targetResourceRegion": "[parameters('location')]",
                "actions": [
                  {
                    "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]",
                "[resourceId('Microsoft.Insights/scheduledQueryRules', 'LogicalDisk Free Space Percent')]"
              ]
            },
            {
              "type": "Microsoft.Insights/scheduledQueryRules",
              "apiVersion": "2021-02-01-preview",
              "name": "LogicalDisk Idle Time Percent",
              "location": "[parameters('location')]",
              "tags": {
                "[format('{0}', format('{0}{1}', variables('convertRuleTag'), parameters('workspaceId')))]": "Resource"
              },
              "kind": "LogToMetric",
              "properties": {
                "displayName": "LogicalDisk Idle Time Percent",
                "description": "Monitor Alert for LogicalDisk Idle Time Percent",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "criteria": {
                  "allOf": [
                    {
                      "metricName": "Average_% Idle Time",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        },
                        {
                          "name": "ObjectName",
                          "operator": "Include",
                          "values": [
                            "LogicalDisk"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "LogicalDisk Idle Time Percent",
              "location": "global",
              "tags": {},
              "properties": {
                "severity": "[variables('alertsSeverity')]",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "description": "Monitor Alert for LogicalDisk Idle Time Percent",
                "evaluationFrequency": "[variables('evaluationFrequency')]",
                "windowSize": "[variables('windowSize')]",
                "criteria": {
                  "allOf": [
                    {
                      "threshold": 20,
                      "name": "Metric1",
                      "metricNamespace": "Microsoft.OperationalInsights/workspaces",
                      "metricName": "Average_% Idle Time",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        },
                        {
                          "name": "ObjectName",
                          "operator": "Include",
                          "values": [
                            "LogicalDisk"
                          ]
                        }
                      ],
                      "operator": "LessThan",
                      "timeAggregation": "Average",
                      "criterionType": "StaticThresholdCriterion"
                    }
                  ],
                  "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": true,
                "targetResourceType": "Microsoft.OperationalInsights/workspaces",
                "targetResourceRegion": "[parameters('location')]",
                "actions": [
                  {
                    "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]",
                "[resourceId('Microsoft.Insights/scheduledQueryRules', 'LogicalDisk Idle Time Percent')]"
              ]
            },
            {
              "type": "Microsoft.Insights/scheduledQueryRules",
              "apiVersion": "2021-02-01-preview",
              "name": "Heartbeat Missed",
              "location": "[parameters('location')]",
              "tags": {
                "[format('{0}', format('{0}{1}', variables('convertRuleTag'), parameters('workspaceId')))]": "Resource"
              },
              "kind": "LogToMetric",
              "properties": {
                "displayName": "Heartbeat Missed",
                "description": "Monitor Alert for Heartbeat Missed",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "criteria": {
                  "allOf": [
                    {
                      "metricName": "Heartbeat",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "Heartbeat Missed",
              "location": "global",
              "tags": {},
              "properties": {
                "severity": "[variables('alertsSeverity')]",
                "enabled": true,
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "description": "Monitor Alert for Heartbeat Missed",
                "evaluationFrequency": "[variables('evaluationFrequency')]",
                "windowSize": "[variables('windowSize')]",
                "criteria": {
                  "allOf": [
                    {
                      "threshold": 0,
                      "name": "Metric1",
                      "metricNamespace": "Microsoft.OperationalInsights/workspaces",
                      "metricName": "Heartbeat",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        }
                      ],
                      "operator": "LessThanOrEqual",
                      "timeAggregation": "Total",
                      "criterionType": "StaticThresholdCriterion"
                    }
                  ],
                  "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": true,
                "targetResourceType": "Microsoft.OperationalInsights/workspaces",
                "targetResourceRegion": "[parameters('location')]",
                "actions": [
                  {
                    "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]",
                "[resourceId('Microsoft.Insights/scheduledQueryRules', 'Heartbeat Missed')]"
              ]
            },
            {
              "type": "Microsoft.Insights/scheduledQueryRules",
              "apiVersion": "2021-08-01",
              "name": "Unexpected System Shutdown",
              "location": "[parameters('location')]",
              "properties": {
                "displayName": "Unexpected System Shutdown",
                "description": "Monitor Alert for Unexpected System Shutdown",
                "severity": "[variables('alertsSeverity')]",
                "enabled": true,
                "evaluationFrequency": "[variables('evaluationFrequency')]",
                "scopes": [
                  "[parameters('workspaceId')]"
                ],
                "targetResourceTypes": [
                  "Microsoft.OperationalInsights/workspaces"
                ],
                "windowSize": "[variables('windowSize')]",
                "criteria": {
                  "allOf": [
                    {
                      "query": "Event | where (EventID == 6008 and Source ==\"EventLog\") or (EventID == 1074 and Source == \"User32\" and (RenderedDescription has \"shutdown\" or RenderedDescription has \"power off\")) \n",
                      "timeAggregation": "Count",
                      "dimensions": [
                        {
                          "name": "Computer",
                          "operator": "Include",
                          "values": [
                            "*"
                          ]
                        }
                      ],
                      "resourceIdColumn": "_ResourceId",
                      "operator": "GreaterThan",
                      "threshold": 0,
                      "failingPeriods": {
                        "numberOfEvaluationPeriods": 1,
                        "minFailingPeriodsToAlert": 1
                      }
                    }
                  ]
                },
                "autoMitigate": false,
                "actions": {
                  "actionGroups": [
                    "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]"
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/workbooks",
              "apiVersion": "2021-03-08",
              "name": "[guid(variables('windowsEventsWorkbookName'))]",
              "location": "[parameters('location')]",
              "kind": "shared",
              "properties": {
                "displayName": "[variables('windowsEventsWorkbookName')]",
                "serializedData": "[string(variables('windowsEventsWorkbookContent'))]",
                "version": "1.0",
                "sourceId": "azure monitor",
                "category": "workbook"
              }
            },
            {
              "type": "Microsoft.Insights/workbooks",
              "apiVersion": "2021-03-08",
              "name": "[guid(variables('osPerformanceWorkbookName'))]",
              "location": "[parameters('location')]",
              "kind": "shared",
              "properties": {
                "displayName": "[variables('osPerformanceWorkbookName')]",
                "serializedData": "[string(variables('osPerformanceWorkbookContent'))]",
                "version": "1.0",
                "sourceId": "azure monitor",
                "category": "workbook"
              }
            },
            {
              "type": "Microsoft.Insights/workbooks",
              "apiVersion": "2021-03-08",
              "name": "[guid(variables('alertsConsoleWorkbookName'))]",
              "location": "[parameters('location')]",
              "kind": "shared",
              "properties": {
                "displayName": "[variables('alertsConsoleWorkbookName')]",
                "serializedData": "[string(variables('alertsConsoleWorkbookContent'))]",
                "version": "1.0",
                "sourceId": "azure monitor",
                "category": "workbook"
              }
            },
            {
              "type": "Microsoft.Portal/dashboards",
              "apiVersion": "2015-08-01-preview",
              "name": "[guid(variables('azureDashboardName'))]",
              "location": "[parameters('location')]",
              "tags": {
                "hidden-title": "[variables('azureDashboardName')]"
              },
              "properties": {
                "lenses": {
                  "0": {
                    "order": 0,
                    "parts": {
                      "0": {
                        "position": {
                          "x": 0,
                          "y": 0,
                          "colSpan": 17,
                          "rowSpan": 4
                        },
                        "metadata": {
                          "inputs": [
                            {
                              "name": "ComponentId",
                              "value": "azure monitor",
                              "isOptional": true
                            },
                            {
                              "name": "TimeContext",
                              "value": null,
                              "isOptional": true
                            },
                            {
                              "name": "ResourceIds",
                              "value": [
                                "azure monitor"
                              ],
                              "isOptional": true
                            },
                            {
                              "name": "ConfigurationId",
                              "value": "[resourceId('Microsoft.Insights/workbooks', guid(variables('osPerformanceWorkbookName')))]",
                              "isOptional": true
                            },
                            {
                              "name": "Type",
                              "value": "workbook",
                              "isOptional": true
                            },
                            {
                              "name": "GalleryResourceType",
                              "value": "azure monitor",
                              "isOptional": true
                            },
                            {
                              "name": "PinName",
                              "value": "[variables('osPerformanceWorkbookName')]",
                              "isOptional": true
                            },
                            {
                              "name": "StepSettings",
                              "value": "{\"version\":\"KqlItem/1.0\",\"query\":\"let trend = ( Heartbeat\\r\\n    | make-series InternalTrend=iff(count() > 0, 1, 0) default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step 15m by Computer\\r\\n    | extend Trend=array_slice(InternalTrend, array_length(InternalTrend) - 30, array_length(InternalTrend)-1)); \\r\\n\\r\\nlet PerfCPU = (Perf\\r\\n    | where ObjectName == \"Processor\" and CounterName == \"% Processor Time\" and InstanceName==\"total\"\\r\\n    | summarize AvgCPU=round(avg(CounterValue),2), MaxCPU=round(max(CounterValue),2) by Computer\\r\\n    | extend StatusCPU = case (\\r\\n                  AvgCPU > 80, 2,\\r\\n                  AvgCPU > 50, 1,\\r\\n                  AvgCPU <= 50, 0, -1\\r\\n                )\\r\\n    );\\r\\n\\r\\nlet PerfMemory = (Perf\\r\\n    | where ObjectName == \"Memory\" and (CounterName == \"Available MBytes\" or CounterName == \"Available MBytes Memory\")\\r\\n    | summarize AvgMEM=round(avg(CounterValue/1024),2), MaxMEM=round(max(CounterValue/1024),2) by Computer\\r\\n    | extend StatusMEM = case (\\r\\n                  AvgMEM > 4, 0,\\r\\n                  AvgMEM >= 1, 1,\\r\\n                  AvgMEM < 1, 2, -1\\r\\n            )\\r\\n    );\\r\\n\\r\\nlet PerfDisk = (Perf\\r\\n    | where (ObjectName == \"LogicalDisk\" or ObjectName == \"Logical Disk\") and CounterName == \"Free Megabytes\" and (InstanceName =~ \"C:\" or InstanceName == \"/\")\\r\\n    | summarize AvgDisk=round(avg(CounterValue),2), (TimeGenerated,LastDisk)=arg_max(TimeGenerated,round(CounterValue,2)) by Computer\\r\\n    | extend StatusDisk = case (\\r\\n                  AvgDisk < 5000, 2,\\r\\n                  AvgDisk < 30000, 1,\\r\\n                  AvgDisk >= 30000, 0,-1\\r\\n)\\r\\n    | project Computer, AvgDisk , LastDisk ,StatusDisk\\r\\n    );\\r\\nPerfCPU\\r\\n| join (PerfMemory) on Computer\\r\\n| join (PerfDisk) on Computer\\r\\n| join (trend) on Computer\\r\\n| project Computer,StatusCPU, AvgCPU,MaxCPU,StatusMEM,AvgMEM,MaxMEM,StatusDisk,AvgDisk,LastDisk, Trend\\r\\n| sort by Computer \",\"size\":0,\"showAnalytics\":true,\"title\":\"Top servers (data aggregated based on TimeRange)\",\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"Computer\",\"exportParameterName\":\"Computer\",\"exportDefaultValue\":\"All\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"StatusCPU\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"0\",\"representation\":\"success\",\"text\":\"{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"1\",\"representation\":\"2\",\"text\":\"{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"2\",\"representation\":\"4\",\"text\":\"{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"Unknown\",\"text\":\"{1}\"}]}},{\"columnMatch\":\"AvgCPU\",\"formatter\":2,\"numberFormat\":{\"unit\":1,\"options\":{\"style\":\"decimal\"}}},{\"columnMatch\":\"MaxCPU\",\"formatter\":0,\"numberFormat\":{\"unit\":1,\"options\":{\"style\":\"decimal\"}}},{\"columnMatch\":\"StatusMEM\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"0\",\"representation\":\"success\",\"text\":\"{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"1\",\"representation\":\"2\",\"text\":\"{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"2\",\"representation\":\"critical\",\"text\":\"{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"unknown\",\"text\":\"{1}\"}]}},{\"columnMatch\":\"AvgMEM\",\"formatter\":0,\"numberFormat\":{\"unit\":5,\"options\":{\"style\":\"decimal\"}}},{\"columnMatch\":\"MaxMEM\",\"formatter\":0,\"numberFormat\":{\"unit\":39,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"StatusDisk\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"0\",\"representation\":\"success\",\"text\":\"{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"1\",\"representation\":\"2\",\"text\":\"{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"2\",\"representation\":\"4\",\"text\":\"{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{1}\"}]}},{\"columnMatch\":\"AvgDisk\",\"formatter\":0,\"numberFormat\":{\"unit\":38,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"LastDisk\",\"formatter\":0,\"numberFormat\":{\"unit\":4,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"Trend\",\"formatter\":10,\"formatOptions\":{\"palette\":\"blue\"}},{\"columnMatch\":\"Max\",\"formatter\":0,\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}},{\"columnMatch\":\"Average\",\"formatter\":8,\"formatOptions\":{\"palette\":\"yellowOrangeRed\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false}}},{\"columnMatch\":\"Min\",\"formatter\":8,\"formatOptions\":{\"palette\":\"yellowOrangeRed\",\"aggregation\":\"Min\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}}],\"sortBy\":[{\"itemKey\":\"$gen_number_AvgCPU_2\",\"sortOrder\":2}],\"labelSettings\":[{\"columnId\":\"StatusCPU\",\"label\":\"CPU\"},{\"columnId\":\"AvgCPU\",\"label\":\"CPU (avg)\"},{\"columnId\":\"MaxCPU\",\"label\":\"CPU (max)\"},{\"columnId\":\"StatusMEM\",\"label\":\"Memory\"},{\"columnId\":\"AvgMEM\",\"label\":\"Memory (avg)\"},{\"columnId\":\"MaxMEM\",\"label\":\"Memory (max)\"},{\"columnId\":\"StatusDisk\",\"label\":\"Disk\"},{\"columnId\":\"AvgDisk\",\"label\":\"Disk (avg)\"},{\"columnId\":\"LastDisk\",\"label\":\"Disk (last)\"}]},\"sortBy\":[{\"itemKey\":\"$gen_number_AvgCPU_2\",\"sortOrder\":2}]}",
                              "isOptional": true
                            },
                            {
                              "name": "ParameterValues",
                              "value": {
                                "TimeRange": {
                                  "type": 4,
                                  "value": {
                                    "durationMs": 86400000
                                  },
                                  "isPending": false,
                                  "isWaiting": false,
                                  "isFailed": false,
                                  "isGlobal": false,
                                  "labelValue": "Last 24 hours",
                                  "displayName": "TimeRange",
                                  "formattedValue": "Last 24 hours"
                                },
                                "Workspace": {
                                  "type": 5,
                                  "value": [
                                    "[parameters('workspaceId')]"
                                  ],
                                  "isPending": false,
                                  "isWaiting": false,
                                  "isFailed": false,
                                  "isGlobal": false,
                                  "labelValue": "[parameters('workspaceId')]",
                                  "displayName": "Workspace",
                                  "formattedValue": "[parameters('workspaceId')]"
                                },
                                "ComputerFilter": {
                                  "type": 1,
                                  "value": "",
                                  "isPending": false,
                                  "isWaiting": false,
                                  "isFailed": false,
                                  "isGlobal": false,
                                  "labelValue": "<unset>",
                                  "displayName": "ComputerFilter",
                                  "formattedValue": ""
                                },
                                "Counter": {
                                  "type": 2,
                                  "value": "{\"counter\":\"% Free Space\",\"object\":\"LogicalDisk\"}",
                                  "isPending": false,
                                  "isWaiting": false,
                                  "isFailed": false,
                                  "isGlobal": false,
                                  "labelValue": "% Free Space",
                                  "displayName": "Counter",
                                  "formattedValue": "{\"counter\":\"% Free Space\",\"object\":\"LogicalDisk\"}"
                                },
                                "Order": {
                                  "type": 2,
                                  "value": "desc",
                                  "isPending": false,
                                  "isWaiting": false,
                                  "isFailed": false,
                                  "isGlobal": false,
                                  "labelValue": "desc",
                                  "displayName": "Order",
                                  "formattedValue": "desc"
                                }
                              },
                              "isOptional": true
                            },
                            {
                              "name": "Location",
                              "value": "[parameters('location')]",
                              "isOptional": true
                            }
                          ],
                          "type": "Extension/AppInsightsExtension/PartType/PinnedNotebookQueryPart"
                        }
                      },
                      "1": {
                        "position": {
                          "x": 0,
                          "y": 4,
                          "colSpan": 12,
                          "rowSpan": 4
                        },
                        "metadata": {
                          "inputs": [
                            {
                              "name": "ComponentId",
                              "value": "Azure Monitor",
                              "isOptional": true
                            },
                            {
                              "name": "TimeContext",
                              "value": null,
                              "isOptional": true
                            },
                            {
                              "name": "ResourceIds",
                              "value": [
                                "Azure Monitor"
                              ],
                              "isOptional": true
                            },
                            {
                              "name": "ConfigurationId",
                              "value": "[resourceId('Microsoft.Insights/workbooks', guid(variables('alertsConsoleWorkbookName')))]",
                              "isOptional": true
                            },
                            {
                              "name": "Type",
                              "value": "workbook",
                              "isOptional": true
                            },
                            {
                              "name": "GalleryResourceType",
                              "value": "Azure Monitor",
                              "isOptional": true
                            },
                            {
                              "name": "PinName",
                              "value": "[variables('alertsConsoleWorkbookName')]",
                              "isOptional": true
                            },
                            {
                              "name": "StepSettings",
                              "value": "{\"version\":\"KqlItem/1.0\",\"query\":\"AlertsManagementResources \\r\\n| where type =~ 'microsoft.alertsmanagement/alerts'\\r\\n| where properties.essentials.startDateTime {timeRange}  \\r\\n| where properties.essentials.actionStatus.isSuppressed == false\\r\\n| extend Severity=tostring(properties.essentials.severity)\\r\\n| extend State=tostring(properties.essentials.alertState)\\r\\n| extend comp = properties.context.context.condition.allOf[0].dimensions\\r\\n| mvexpand comp\\r\\n| where comp.name == 'Computer' or comp.name == 'TestConfigurationName' or isnull(comp)\\r\\n| where \"*\" in ({State}) or State in ({State})\\r\\n| where \"*\" in ({ResourceTypes}) or properties.essentials.targetResourceType in~ ({ResourceTypes})\\r\\n| where \"*\" in ({ResourceGroups}) or properties.essentials.targetResourceGroup in~ ({ResourceGroups})\\r\\n| where \"*\" in ({Resources}) or properties.essentials.targetResource in~ ({Resources})\\r\\n| project AlertId=id, StartTime=todatetime(tostring(properties.essentials.startDateTime)), Name=name, Severity, State=tostring(properties.essentials.alertState), MonitorCondition=tostring(properties.essentials.monitorCondition), SignalType=tostring(properties.essentials.signalType), TargetResource = split(comp.value, '.')[0]\\r\\n| order by StartTime desc\\r\\n\",\"size\":0,\"title\":\"Azure Monitor alerts\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{Subscription}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"AlertId\",\"formatter\":5},{\"columnMatch\":\"StartTime\",\"formatter\":6},{\"columnMatch\":\"Name\",\"formatter\":1,\"formatOptions\":{\"linkTarget\":\"OpenBlade\",\"linkIsContextBlade\":true,\"bladeOpenContext\":{\"bladeName\":\"AlertDetailsTemplateBlade\",\"extensionName\":\"Microsoft_Azure_Monitoring\",\"bladeParameters\":[{\"name\":\"alertId\",\"source\":\"column\",\"value\":\"AlertId\"},{\"name\":\"alertName\",\"source\":\"column\",\"value\":\"Name\"},{\"name\":\"invokedFrom\",\"source\":\"static\",\"value\":\"Workbooks\"}]}},\"tooltipFormat\":{\"tooltip\":\"View alert details\"}},{\"columnMatch\":\"Severity\",\"formatter\":11},{\"columnMatch\":\"State\",\"formatter\":1},{\"columnMatch\":\"MonitorCondition\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Fired\",\"representation\":\"Fired\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Resolved\",\"representation\":\"Resolved\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"TargetResource\",\"formatter\":13,\"formatOptions\":{\"linkTarget\":null,\"showIcon\":true}},{\"columnMatch\":\"ResourceType\",\"formatter\":16,\"formatOptions\":{\"showIcon\":true}},{\"columnMatch\":\"Resource Type\",\"formatter\":11},{\"columnMatch\":\"essentials\",\"formatter\":5}]}}",
                              "isOptional": true
                            },
                            {
                              "name": "ParameterValues",
                              "value": {
                                "Subscription": {
                                  "type": 6,
                                  "value": [
                                    "[subscription().id]"
                                  ],
                                  "isPending": false,
                                  "isWaiting": false,
                                  "isFailed": false,
                                  "isGlobal": false,
                                  "labelValue": "[subscription().displayName]",
                                  "displayName": "Subscriptions",
                                  "formattedValue": "[format('{0}{1}{2}', variables('singlequote'), subscription().id, variables('singlequote'))]"
                                },
                                "ResourceGroups": {
                                  "type": 2,
                                  "value": [
                                    "[resourceGroup().name]"
                                  ],
                                  "isPending": false,
                                  "isWaiting": false,
                                  "isFailed": false,
                                  "isGlobal": false,
                                  "labelValue": "[resourceGroup().name]",
                                  "displayName": "Resource groups",
                                  "formattedValue": "[format('{0}{1}{2}', variables('singlequote'), resourceGroup().name, variables('singlequote'))]"
                                },
                                "ResourceTypes": {
                                  "type": 7,
                                  "value": [
                                    "*"
                                  ],
                                  "isPending": false,
                                  "isWaiting": false,
                                  "isFailed": false,
                                  "isGlobal": false,
                                  "labelValue": "All",
                                  "displayName": "Resource types",
                                  "specialValue": [
                                    "value::all"
                                  ],
                                  "formattedValue": "'*'"
                                },
                                "Resources": {
                                  "type": 5,
                                  "value": [
                                    "*"
                                  ],
                                  "isPending": false,
                                  "isWaiting": false,
                                  "isFailed": false,
                                  "isGlobal": false,
                                  "labelValue": "All",
                                  "displayName": "Resources",
                                  "specialValue": [
                                    "value::all"
                                  ],
                                  "formattedValue": "'*'"
                                },
                                "timeRange": {
                                  "type": 4,
                                  "value": {
                                    "durationMs": 2592000000
                                  },
                                  "isPending": false,
                                  "isWaiting": false,
                                  "isFailed": false,
                                  "isGlobal": false,
                                  "labelValue": "Last 30 days",
                                  "displayName": "Time Range",
                                  "formattedValue": "Last 30 days"
                                },
                                "State": {
                                  "type": 2,
                                  "value": [
                                    "*"
                                  ],
                                  "isPending": false,
                                  "isWaiting": false,
                                  "isFailed": false,
                                  "isGlobal": false,
                                  "labelValue": "All",
                                  "displayName": "State",
                                  "specialValue": [
                                    "value::all"
                                  ],
                                  "formattedValue": "'*'"
                                }
                              },
                              "isOptional": true
                            },
                            {
                              "name": "Location",
                              "value": "[parameters('location')]",
                              "isOptional": true
                            }
                          ],
                          "type": "Extension/AppInsightsExtension/PartType/PinnedNotebookQueryPart"
                        }
                      },
                      "2": {
                        "position": {
                          "x": 12,
                          "y": 4,
                          "colSpan": 5,
                          "rowSpan": 4
                        },
                        "metadata": {
                          "inputs": [
                            {
                              "name": "ComponentId",
                              "value": "Azure Monitor",
                              "isOptional": true
                            },
                            {
                              "name": "TimeContext",
                              "value": null,
                              "isOptional": true
                            },
                            {
                              "name": "ResourceIds",
                              "value": [
                                "Azure Monitor"
                              ],
                              "isOptional": true
                            },
                            {
                              "name": "ConfigurationId",
                              "value": "[resourceId('Microsoft.Insights/workbooks', guid(variables('windowsEventsWorkbookName')))]",
                              "isOptional": true
                            },
                            {
                              "name": "Type",
                              "value": "workbook",
                              "isOptional": true
                            },
                            {
                              "name": "GalleryResourceType",
                              "value": "Azure Monitor",
                              "isOptional": true
                            },
                            {
                              "name": "PinName",
                              "value": "[variables('windowsEventsWorkbookName')]",
                              "isOptional": true
                            },
                            {
                              "name": "StepSettings",
                              "value": "{\"version\":\"KqlItem/1.0\",\"query\":\"Event\\r\\n|  where EventLog in (\"System\",\"Application\",\"Operations Manager\")\\r\\n| project EventLog,EventLevelName\\r\\n| evaluate pivot(EventLevelName)\",\"size\":1,\"showAnalytics\":true,\"title\":\"Windows Events - Summary\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"EventLog\",\"exportParameterName\":\"EventLog\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Information\",\"formatter\":18,\"formatOptions\":{\"showIcon\":true,\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"info\",\"text\":\"{0}{1}\"}],\"aggregation\":\"Unique\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}},{\"columnMatch\":\"Warning\",\"formatter\":18,\"formatOptions\":{\"showIcon\":true,\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"warning\",\"text\":\"{0}{1}\"}],\"aggregation\":\"Unique\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}},{\"columnMatch\":\"Error\",\"formatter\":18,\"formatOptions\":{\"showIcon\":true,\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"3\",\"text\":\"{0}{1}\"}],\"aggregation\":\"Unique\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}}]}}",
                              "isOptional": true
                            },
                            {
                              "name": "ParameterValues",
                              "value": {
                                "TimeRange": {
                                  "type": 4,
                                  "value": {
                                    "durationMs": 604800000
                                  },
                                  "isPending": false,
                                  "isWaiting": false,
                                  "isFailed": false,
                                  "isGlobal": false,
                                  "labelValue": "Last 7 days",
                                  "displayName": "TimeRange",
                                  "formattedValue": "Last 7 days"
                                },
                                "Workspace": {
                                  "type": 5,
                                  "value": [
                                    "[parameters('workspaceId')]"
                                  ],
                                  "isPending": false,
                                  "isWaiting": false,
                                  "isFailed": false,
                                  "isGlobal": false,
                                  "labelValue": "[parameters('workspaceName')]",
                                  "displayName": "Workspace",
                                  "formattedValue": "[parameters('workspaceId')]"
                                }
                              },
                              "isOptional": true
                            },
                            {
                              "name": "Location",
                              "value": "[parameters('location')]",
                              "isOptional": true
                            }
                          ],
                          "type": "Extension/AppInsightsExtension/PartType/PinnedNotebookQueryPart"
                        }
                      }
                    }
                  }
                },
                "metadata": {
                  "model": {
                    "timeRange": {
                      "value": {
                        "relative": {
                          "duration": 24,
                          "timeUnit": 1
                        }
                      },
                      "type": "MsPortalFx.Composition.Configuration.ValueTypes.TimeRange"
                    },
                    "filterLocale": {
                      "value": "en-us"
                    },
                    "filters": {
                      "value": {
                        "MsPortalFx_TimeRange": {
                          "model": {
                            "format": "utc",
                            "granularity": "auto",
                            "relative": "24h"
                          },
                          "displayCache": {
                            "name": "UTC Time",
                            "value": "Past 24 hours"
                          },
                          "filteredPartIds": [
                            "StartboardPart-PinnedNotebookQueryPart-952cffdb-b288-4824-9872-6327c6028516",
                            "StartboardPart-PinnedNotebookQueryPart-952cffdb-b288-4824-9872-6327c6028518",
                            "StartboardPart-PinnedNotebookQueryPart-952cffdb-b288-4824-9872-6327c602851a",
                            "StartboardPart-PinnedNotebookQueryPart-952cffdb-b288-4824-9872-6327c602851c"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/workbooks', guid(variables('alertsConsoleWorkbookName')))]",
                "[resourceId('Microsoft.Insights/workbooks', guid(variables('osPerformanceWorkbookName')))]",
                "[resourceId('Microsoft.Insights/workbooks', guid(variables('windowsEventsWorkbookName')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'mgmtArtifactsAndPolicyDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "policyDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "azureLocation": {
            "value": "[parameters('location')]"
          },
          "changeTrackingDCR": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataCollectionRules'), '2022-09-01').outputs.changeTrackingDCR.value]"
          },
          "vmInsightsDCR": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataCollectionRules'), '2022-09-01').outputs.vmInsightsDCR.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "11762790190184905632"
            }
          },
          "parameters": {
            "azureLocation": {
              "type": "string",
              "metadata": {
                "description": "Location of your Azure resources"
              }
            },
            "changeTrackingDCR": {
              "type": "string",
              "metadata": {
                "description": "Id of change tracking DCR"
              }
            },
            "vmInsightsDCR": {
              "type": "string",
              "metadata": {
                "description": "Id of VMInsights DCR"
              }
            },
            "changeTrackingPolicySetDefintion": {
              "type": "string",
              "defaultValue": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/policySetDefinitions/(ArcBox) Enable ChangeTracking for Arc-enabled machines', subscription().subscriptionId)]"
            },
            "contributorRoleDefinition": {
              "type": "string",
              "defaultValue": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c', subscription().subscriptionId)]"
            },
            "hybridAMAPolicyId": {
              "type": "string",
              "defaultValue": "/providers/Microsoft.Authorization/policySetDefinitions/2b00397d-c309-49c4-aa5a-f0b2c5bc6321"
            },
            "azureUpdateManagerPolicyId": {
              "type": "string",
              "defaultValue": "/providers/Microsoft.Authorization/policyDefinitions/bfea026e-043f-4ff4-9d1b-bf301ca7ff46"
            },
            "connectedMachineResourceAdminRole": {
              "type": "string",
              "defaultValue": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302', subscription().subscriptionId)]"
            },
            "monitoringContributorRole": {
              "type": "string",
              "defaultValue": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa', subscription().subscriptionId)]"
            },
            "logAnalyticsContributor": {
              "type": "string",
              "defaultValue": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293', subscription().subscriptionId)]"
            },
            "taggingPolicyDefintionId": {
              "type": "string",
              "defaultValue": "/providers/Microsoft.Authorization/policyDefinitions/4f9dc7db-30c1-420c-b61a-e1d640128d26"
            }
          },
          "variables": {
            "policies": [
              {
                "name": "(ArcBox) Tag resources",
                "definitionId": "[parameters('taggingPolicyDefintionId')]",
                "flavors": [
                  "Full",
                  "ITPro",
                  "DevOps",
                  "DataOps"
                ],
                "roleDefinition": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c', subscription().subscriptionId)]",
                "parameters": {
                  "tagName": {
                    "value": "Project"
                  },
                  "tagValue": {
                    "value": "jumpstart_arcbox"
                  }
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/policyAssignments",
              "apiVersion": "2024-04-01",
              "name": "(ArcBox) Tag resources",
              "location": "[parameters('azureLocation')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "displayName": "(ArcBox) Tag resources",
                "description": "Tag resources",
                "policyDefinitionId": "[parameters('taggingPolicyDefintionId')]",
                "parameters": {
                  "tagName": {
                    "value": "Project"
                  },
                  "tagValue": {
                    "value": "jumpstart_arcbox"
                  }
                }
              }
            },
            {
              "type": "Microsoft.Authorization/policyAssignments",
              "apiVersion": "2024-04-01",
              "name": "(ArcBox) Enable Azure Update Manager for Arc-enabled machines",
              "location": "[parameters('azureLocation')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "displayName": "(ArcBox) Enable Azure Update Manager for Arc-enabled machines",
                "description": "Enable Azure Update Manager for Arc-enabled machines",
                "policyDefinitionId": "[parameters('azureUpdateManagerPolicyId')]"
              }
            },
            {
              "type": "Microsoft.Authorization/policyAssignments",
              "apiVersion": "2024-04-01",
              "name": "(ArcBox) Enable Azure Monitor for Hybrid VMs with AMA",
              "location": "[parameters('azureLocation')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "displayName": "(ArcBox) Enable Azure Monitor for Hybrid VMs with AMA",
                "description": "Enable Azure Monitor for Hybrid VMs with AMA",
                "policyDefinitionId": "[parameters('hybridAMAPolicyId')]",
                "parameters": {
                  "dcrResourceId": {
                    "value": "[parameters('vmInsightsDCR')]"
                  },
                  "enableProcessesAndDependencies": {
                    "value": true
                  }
                }
              }
            },
            {
              "type": "Microsoft.Authorization/policyAssignments",
              "apiVersion": "2024-04-01",
              "name": "(ArcBox) Enable ChangeTracking for Arc-enabled machines",
              "location": "[parameters('azureLocation')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "displayName": "(ArcBox) Enable ChangeTracking for Arc-enabled machines",
                "description": "Enable ChangeTracking for Arc-enabled machines",
                "policyDefinitionId": "[parameters('changeTrackingPolicySetDefintion')]",
                "parameters": {
                  "dcrResourceId": {
                    "value": "[parameters('changeTrackingDCR')]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Authorization/policyAssignments', '(ArcBox) Enable Azure Monitor for Hybrid VMs with AMA')]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid('(ArcBox) Enable ChangeTracking for Arc-enabled machines', parameters('connectedMachineResourceAdminRole'), resourceGroup().id)]",
              "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[parameters('connectedMachineResourceAdminRole')]",
                "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', '(ArcBox) Enable ChangeTracking for Arc-enabled machines'), '2024-04-01', 'full').identity.principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Authorization/policyAssignments', '(ArcBox) Enable ChangeTracking for Arc-enabled machines')]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid('(ArcBox) Enable ChangeTracking for Arc-enabled machines', parameters('logAnalyticsContributor'), resourceGroup().id)]",
              "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[parameters('logAnalyticsContributor')]",
                "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', '(ArcBox) Enable ChangeTracking for Arc-enabled machines'), '2024-04-01', 'full').identity.principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Authorization/policyAssignments', '(ArcBox) Enable ChangeTracking for Arc-enabled machines')]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid('(ArcBox) Enable ChangeTracking for Arc-enabled machines', parameters('monitoringContributorRole'), resourceGroup().id)]",
              "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[parameters('monitoringContributorRole')]",
                "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', '(ArcBox) Enable ChangeTracking for Arc-enabled machines'), '2024-04-01', 'full').identity.principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Authorization/policyAssignments', '(ArcBox) Enable ChangeTracking for Arc-enabled machines')]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "name": "[guid('(ArcBox) Tag resources', variables('policies')[0].roleDefinition, resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[parameters('contributorRoleDefinition')]",
                "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', '(ArcBox) Tag resources'), '2024-04-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Authorization/policyAssignments', '(ArcBox) Tag resources')]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'dataCollectionRules')]",
        "[resourceId('Microsoft.Resources/deployments', 'mgmtArtifactsAndPolicyDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "dataCollectionRules",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "workspaceLocation": {
            "value": "[parameters('location')]"
          },
          "workspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "workspaceResourceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'mgmtArtifactsAndPolicyDeployment'), '2022-09-01').outputs.workspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "10332084495993994282"
            }
          },
          "parameters": {
            "dataCollectionRuleNameVMI": {
              "type": "string",
              "defaultValue": "arcbox-ama-vmi-perfAndda-dcr",
              "metadata": {
                "displayName": "Name of the Data Collection Rule(DCR)",
                "description": "This is the name of the AMA-VMI Data Collection Rule(DCR)"
              }
            },
            "workspaceLocation": {
              "type": "string",
              "metadata": {
                "description": "Workspace Location."
              }
            },
            "workspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Workspace Resource ID."
              }
            },
            "workspaceName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the workspace."
              }
            },
            "dataCollectionRuleNameCt": {
              "type": "string",
              "defaultValue": "arcbox-ama-ct-dcr",
              "metadata": {
                "description": "Specifies the name of the data collection rule to create."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/dataCollectionRules",
              "apiVersion": "2021-04-01",
              "name": "[parameters('dataCollectionRuleNameVMI')]",
              "location": "[parameters('workspaceLocation')]",
              "properties": {
                "description": "Data collection rule for VM Insights.",
                "dataSources": {
                  "performanceCounters": [
                    {
                      "name": "VMInsightsPerfCounters",
                      "streams": [
                        "Microsoft-InsightsMetrics"
                      ],
                      "samplingFrequencyInSeconds": 60,
                      "counterSpecifiers": [
                        "\\VmInsights\\DetailedMetrics"
                      ]
                    }
                  ],
                  "extensions": [
                    {
                      "streams": [
                        "Microsoft-ServiceMap"
                      ],
                      "extensionName": "DependencyAgent",
                      "extensionSettings": {},
                      "name": "DependencyAgentDataSource"
                    }
                  ]
                },
                "destinations": {
                  "logAnalytics": [
                    {
                      "workspaceResourceId": "[parameters('workspaceResourceId')]",
                      "name": "VMInsightsPerf-Logs-Dest"
                    }
                  ]
                },
                "dataFlows": [
                  {
                    "streams": [
                      "Microsoft-InsightsMetrics"
                    ],
                    "destinations": [
                      "VMInsightsPerf-Logs-Dest"
                    ]
                  },
                  {
                    "streams": [
                      "Microsoft-ServiceMap"
                    ],
                    "destinations": [
                      "VMInsightsPerf-Logs-Dest"
                    ]
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Insights/dataCollectionRules",
              "apiVersion": "2021-04-01",
              "name": "[parameters('dataCollectionRuleNameCt')]",
              "location": "[parameters('workspaceLocation')]",
              "properties": {
                "description": "Data collection rule for CT.",
                "dataSources": {
                  "extensions": [
                    {
                      "streams": [
                        "Microsoft-ConfigurationChange",
                        "Microsoft-ConfigurationChangeV2",
                        "Microsoft-ConfigurationData"
                      ],
                      "extensionName": "ChangeTracking-Windows",
                      "extensionSettings": {
                        "enableFiles": true,
                        "enableSoftware": true,
                        "enableRegistry": true,
                        "enableServices": true,
                        "enableInventory": true,
                        "registrySettings": {
                          "registryCollectionFrequency": 3000,
                          "registryInfo": [
                            {
                              "name": "Registry_1",
                              "groupTag": "Recommended",
                              "enabled": false,
                              "recurse": true,
                              "description": "",
                              "keyName": "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\\Startup",
                              "valueName": ""
                            },
                            {
                              "name": "Registry_2",
                              "groupTag": "Recommended",
                              "enabled": false,
                              "recurse": true,
                              "description": "",
                              "keyName": "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\\Shutdown",
                              "valueName": ""
                            },
                            {
                              "name": "Registry_3",
                              "groupTag": "Recommended",
                              "enabled": false,
                              "recurse": true,
                              "description": "",
                              "keyName": "HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run",
                              "valueName": ""
                            },
                            {
                              "name": "Registry_4",
                              "groupTag": "Recommended",
                              "enabled": false,
                              "recurse": true,
                              "description": "",
                              "keyName": "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components",
                              "valueName": ""
                            },
                            {
                              "name": "Registry_5",
                              "groupTag": "Recommended",
                              "enabled": false,
                              "recurse": true,
                              "description": "",
                              "keyName": "HKEY_LOCAL_MACHINE\\Software\\Classes\\Directory\\ShellEx\\ContextMenuHandlers",
                              "valueName": ""
                            },
                            {
                              "name": "Registry_6",
                              "groupTag": "Recommended",
                              "enabled": false,
                              "recurse": true,
                              "description": "",
                              "keyName": "HKEY_LOCAL_MACHINE\\Software\\Classes\\Directory\\Background\\ShellEx\\ContextMenuHandlers",
                              "valueName": ""
                            },
                            {
                              "name": "Registry_7",
                              "groupTag": "Recommended",
                              "enabled": false,
                              "recurse": true,
                              "description": "",
                              "keyName": "HKEY_LOCAL_MACHINE\\Software\\Classes\\Directory\\Shellex\\CopyHookHandlers",
                              "valueName": ""
                            },
                            {
                              "name": "Registry_8",
                              "groupTag": "Recommended",
                              "enabled": false,
                              "recurse": true,
                              "description": "",
                              "keyName": "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ShellIconOverlayIdentifiers",
                              "valueName": ""
                            },
                            {
                              "name": "Registry_9",
                              "groupTag": "Recommended",
                              "enabled": false,
                              "recurse": true,
                              "description": "",
                              "keyName": "HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ShellIconOverlayIdentifiers",
                              "valueName": ""
                            },
                            {
                              "name": "Registry_10",
                              "groupTag": "Recommended",
                              "enabled": false,
                              "recurse": true,
                              "description": "",
                              "keyName": "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Browser Helper Objects",
                              "valueName": ""
                            },
                            {
                              "name": "Registry_11",
                              "groupTag": "Recommended",
                              "enabled": false,
                              "recurse": true,
                              "description": "",
                              "keyName": "HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Browser Helper Objects",
                              "valueName": ""
                            },
                            {
                              "name": "Registry_12",
                              "groupTag": "Recommended",
                              "enabled": false,
                              "recurse": true,
                              "description": "",
                              "keyName": "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Internet Explorer\\Extensions",
                              "valueName": ""
                            },
                            {
                              "name": "Registry_13",
                              "groupTag": "Recommended",
                              "enabled": false,
                              "recurse": true,
                              "description": "",
                              "keyName": "HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Internet Explorer\\Extensions",
                              "valueName": ""
                            },
                            {
                              "name": "Registry_14",
                              "groupTag": "Recommended",
                              "enabled": false,
                              "recurse": true,
                              "description": "",
                              "keyName": "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Drivers32",
                              "valueName": ""
                            },
                            {
                              "name": "Registry_15",
                              "groupTag": "Recommended",
                              "enabled": false,
                              "recurse": true,
                              "description": "",
                              "keyName": "HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Drivers32",
                              "valueName": ""
                            },
                            {
                              "name": "Registry_16",
                              "groupTag": "Recommended",
                              "enabled": false,
                              "recurse": true,
                              "description": "",
                              "keyName": "HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\KnownDlls",
                              "valueName": ""
                            },
                            {
                              "name": "Registry_17",
                              "groupTag": "Recommended",
                              "enabled": false,
                              "recurse": true,
                              "description": "",
                              "keyName": "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify",
                              "valueName": ""
                            }
                          ]
                        },
                        "fileSettings": {
                          "fileCollectionFrequency": 2700
                        },
                        "softwareSettings": {
                          "softwareCollectionFrequency": 1800
                        },
                        "inventorySettings": {
                          "inventoryCollectionFrequency": 36000
                        },
                        "servicesSettings": {
                          "serviceCollectionFrequency": 1800
                        }
                      },
                      "name": "CTDataSource-Windows"
                    },
                    {
                      "streams": [
                        "Microsoft-ConfigurationChange",
                        "Microsoft-ConfigurationChangeV2",
                        "Microsoft-ConfigurationData"
                      ],
                      "extensionName": "ChangeTracking-Linux",
                      "extensionSettings": {
                        "enableFiles": true,
                        "enableSoftware": true,
                        "enableRegistry": false,
                        "enableServices": true,
                        "enableInventory": true,
                        "fileSettings": {
                          "fileCollectionFrequency": 900,
                          "fileInfo": [
                            {
                              "name": "ChangeTrackingLinuxPath_default",
                              "enabled": true,
                              "destinationPath": "/etc/.*.conf",
                              "useSudo": true,
                              "recurse": true,
                              "maxContentsReturnable": 5000000,
                              "pathType": "File",
                              "type": "File",
                              "links": "Follow",
                              "maxOutputSize": 500000,
                              "groupTag": "Recommended"
                            }
                          ]
                        },
                        "softwareSettings": {
                          "softwareCollectionFrequency": 300
                        },
                        "inventorySettings": {
                          "inventoryCollectionFrequency": 36000
                        },
                        "servicesSettings": {
                          "serviceCollectionFrequency": 300
                        }
                      },
                      "name": "CTDataSource-Linux"
                    }
                  ]
                },
                "destinations": {
                  "logAnalytics": [
                    {
                      "workspaceResourceId": "[parameters('workspaceResourceId')]",
                      "name": "Microsoft-CT-Dest"
                    }
                  ]
                },
                "dataFlows": [
                  {
                    "streams": [
                      "Microsoft-ConfigurationChange",
                      "Microsoft-ConfigurationChangeV2",
                      "Microsoft-ConfigurationData"
                    ],
                    "destinations": [
                      "Microsoft-CT-Dest"
                    ]
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationsManagement/solutions",
              "apiVersion": "2015-11-01-preview",
              "name": "[format('ChangeTracking({0})', parameters('workspaceName'))]",
              "location": "[parameters('workspaceLocation')]",
              "properties": {
                "workspaceResourceId": "[parameters('workspaceResourceId')]"
              },
              "plan": {
                "name": "[format('ChangeTracking({0})', parameters('workspaceName'))]",
                "product": "OMSGallery/ChangeTracking",
                "promotionCode": "",
                "publisher": "Microsoft"
              }
            }
          ],
          "outputs": {
            "changeTrackingDCR": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/dataCollectionRules', parameters('dataCollectionRuleNameCt'))]"
            },
            "vmInsightsDCR": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/dataCollectionRules', parameters('dataCollectionRuleNameVMI'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'mgmtArtifactsAndPolicyDeployment')]"
      ]
    }
  ]
}